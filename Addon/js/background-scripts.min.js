var xBrowserSync = xBrowserSync || {};

xBrowserSync.App = xBrowserSync.App || {};

xBrowserSync.App.Global = function() {
    "use strict";
    var Global = {
        Alarm: {
            Name: "xBrowserSync-alarm",
            Period: 15
        },
        AppVersion: "1.5.2",
        Bookmarks: {
            ContainerPrefix: "[xbs]",
            DescriptionMaxLength: 300,
            MenuContainerName: "[xbs] Menu",
            MobileContainerName: "[xbs] Mobile",
            OtherContainerName: "[xbs] Other",
            OtherContainerNameOld: "_other_",
            HorizontalSeparatorTitle: "────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────",
            ToolbarContainerName: "[xbs] Toolbar",
            ToolbarContainerNameOld: "_toolbar_",
            UnfiledContainerNameOld: "_xBrowserSync_",
            VerticalSeparatorTitle: "|"
        },
        CacheKeys: {
            AppVersion: "appVersion",
            Bookmarks: "bookmarks",
            CheckForAppUpdates: "checkForAppUpdates",
            DisplayHelp: "displayHelp",
            DisplayOtherSyncsWarning: "displayOtherSyncsWarning",
            DisplayPermissions: "displayPermissions",
            DisplaySearchBarBeneathResults: "displaySearchBarBeneathResults",
            DisplayUpdated: "displayUpdated",
            InstallBackup: "installBackup",
            LastUpdated: "lastUpdated",
            Password: "password",
            ServiceUrl: "serviceUrl",
            SyncBookmarksToolbar: "syncBookmarksToolbar",
            SyncEnabled: "syncEnabled",
            SyncId: "syncId",
            SyncVersion: "syncVersion",
            TraceLog: "traceLog",
            UncommittedSyncs: "uncommittedSyncs"
        },
        Commands: {
            SyncBookmarks: 1,
            RestoreBookmarks: 2,
            GetCurrentSync: 3,
            GetSyncQueueLength: 4,
            DisableSync: 5,
            GetPageMetadata: 6,
            EnableEventListeners: 7,
            DisableEventListeners: 8
        },
        Constants: {
            Title: "title",
            Description: "description",
            AppUpdateAvailable_Message: "appUpdateAvailable_Message",
            AppUpdateAvailable_Android_Message: "appUpdateAvailable_Android_Message",
            AppUpdateAvailable_Title: "appUpdateAvailable_Title",
            AppUpdated_Message: "appUpdated_Message",
            AppUpdated_Title: "appUpdated_Title",
            Tooltip_NotSynced_Label: "tooltip_NotSynced_Label",
            Tooltip_Synced_Label: "tooltip_Synced_Label",
            Tooltip_Syncing_Label: "tooltip_Syncing_Label",
            Login_GetSyncId_Title: "login_GetSyncId_Title",
            Login_GetSyncId_Message: "login_GetSyncId_Message",
            Help_Page_Welcome_Desktop_Content: "help_Page_Welcome_Desktop_Content",
            Help_Page_Welcome_Android_Content: "help_Page_Welcome_Android_Content",
            Help_Page_BeforeYouBegin_Chrome_Content: "help_Page_BeforeYouBegin_Chrome_Content",
            Help_Page_BeforeYouBegin_Firefox_Content: "help_Page_BeforeYouBegin_Firefox_Content",
            Help_Page_FirstSync_Desktop_Content: "help_Page_FirstSync_Desktop_Content",
            Help_Page_FirstSync_Android_Content: "help_Page_FirstSync_Android_Content",
            Help_Page_SyncId_Content: "help_Page_SyncId_Content",
            Help_Page_ExistingId_Desktop_Content: "help_Page_ExistingId_Desktop_Content",
            Help_Page_ExistingId_Android_Content: "help_Page_ExistingId_Android_Content",
            Help_Page_Service_Content: "help_Page_Service_Content",
            Help_Page_Searching_Desktop_Content: "help_Page_Searching_Desktop_Content",
            Help_Page_Searching_Android_Content: "help_Page_Searching_Android_Content",
            Help_Page_AddingBookmarks_Chrome_Content: "help_Page_AddingBookmarks_Chrome_Content",
            Help_Page_AddingBookmarks_Firefox_Content: "help_Page_AddingBookmarks_Firefox_Content",
            Help_Page_AddingBookmarks_Android_Content: "help_Page_AddingBookmarks_Android_Content",
            Help_Page_NativeFeatures_Chrome_Content: "help_Page_NativeFeatures_Chrome_Content",
            Help_Page_NativeFeatures_Firefox_Content: "help_Page_NativeFeatures_Firefox_Content",
            Help_Page_BackingUp_Desktop_Content: "help_Page_BackingUp_Desktop_Content",
            Help_Page_BackingUp_Android_Content: "help_Page_BackingUp_Android_Content",
            Help_Page_Shortcuts_Chrome_Content: "help_Page_Shortcuts_Chrome_Content",
            Help_Page_Shortcuts_Firefox_Content: "help_Page_Shortcuts_Firefox_Content",
            Help_Page_Mobile_Content: "help_Page_Mobile_Content",
            Help_Page_FurtherSupport_Content: "help_Page_FurtherSupport_Content",
            Login_SelectedService_Label: "login_SelectedService_Label",
            Login_PasswordConfirmationField_Label: "login_PasswordConfirmationField_Label",
            Login_PasswordField_Label: "login_PasswordField_Label",
            Login_PasswordField_Existing_Description: "login_PasswordField_Existing_Description",
            Login_PasswordField_New_Description: "login_PasswordField_New_Description",
            Login_IdField_Label: "login_IdField_Label",
            Login_IdField_Description: "login_IdField_Description",
            Login_IdField_InvalidSyncId_Label: "login_IdField_InvalidSyncId_Label",
            Login_ConfirmUpdateService_Title: "login_ConfirmUpdateService_Title",
            Login_ConfirmUpdateService_Warning: "login_ConfirmUpdateService_Warning",
            Login_ConfirmUpdateService_Status_Label: "login_ConfirmUpdateService_Status_Label",
            Login_ConfirmUpdateService_Location_Label: "login_ConfirmUpdateService_Location_Label",
            Login_ConfirmUpdateService_MaxSyncSize_Label: "login_ConfirmUpdateService_MaxSyncSize_Label",
            Login_ConfirmUpdateService_ApiVersion_Label: "login_ConfirmUpdateService_ApiVersion_Label",
            Login_ConfirmSync_Title: "login_ConfirmSync_Title",
            Login_ConfirmSync_Message: "login_ConfirmSync_Message",
            Login_DisableOtherSyncs_Title: "login_DisableOtherSyncs_Title",
            Login_DisableOtherSyncs_Message: "login_DisableOtherSyncs_Message",
            Login_UpgradeSync_Title: "login_UpgradeSync_Title",
            Login_UpgradeSync_Message: "login_UpgradeSync_Message",
            Login_ScanId_Title: "login_ScanId_Title",
            Login_ScanId_Message: "login_ScanId_Message",
            Support_Title: "support_Title",
            Support_Message: "support_Message",
            Permissions_Message: "permissions_Message",
            Permissions_Title: "permissions_Title",
            Search_Field_Description: "search_Field_Description",
            Search_NoBookmarks_Message: "search_NoBookmarks_Message",
            Search_NoResults_Message: "search_NoResults_Message",
            Search_FolderEmpty_Message: "search_FolderEmpty_Message",
            ShareBookmark_Message: "shareBookmark_Message",
            BookmarkShared_Message: "bookmarkShared_Message",
            BookmarkCreated_Message: "bookmarkCreated_Message",
            BookmarkDeleted_Message: "bookmarkDeleted_Message",
            BookmarkUpdated_Message: "bookmarkUpdated_Message",
            Scan_Title: "scan_Title",
            Settings_Prefs_SyncToolbarConfirmation_Message: "settings_Prefs_SyncToolbarConfirmation_Message",
            Settings_Sync_Id_Description: "settings_Sync_Id_Description",
            Settings_Sync_UpdatesAvailable_False_Message: "settings_Sync_UpdatesAvailable_False_Message",
            Settings_Sync_UpdatesAvailable_True_Message: "settings_Sync_UpdatesAvailable_True_Message",
            Settings_BackupRestore_Backup_Label: "settings_BackupRestore_Backup_Label",
            Settings_BackupRestore_BackupLocal_Description: "settings_BackupRestore_BackupLocal_Description",
            Settings_BackupRestore_BackupSynced_Description: "settings_BackupRestore_BackupSynced_Description",
            Settings_BackupRestore_Restore_Label: "settings_BackupRestore_Restore_Label",
            Settings_BackupRestore_RestoreLocal_Description: "settings_BackupRestore_RestoreLocal_Description",
            Settings_BackupRestore_RestoreSynced_Description: "settings_BackupRestore_RestoreSynced_Description",
            Settings_BackupRestore_Revert_Label: "settings_BackupRestore_Revert_Label",
            Settings_BackupRestore_Revert_Description: "settings_BackupRestore_Revert_Description",
            Settings_BackupRestore_Revert_Confirmation_Message: "settings_BackupRestore_Revert_Confirmation_Message",
            Settings_BackupRestore_Revert_Completed_Label: "settings_BackupRestore_Revert_Completed_Label",
            Settings_BackupRestore_Revert_Unavailable_Label: "settings_BackupRestore_Revert_Unavailable_Label",
            Settings_About_Title: "settings_About_Title",
            Settings_About_AppVersion_Label: "settings_About_AppVersion_Label",
            Settings_Issues_Help_Label: "settings_Issues_Help_Label",
            Settings_Issues_Help_Description: "settings_Issues_Help_Description",
            Settings_Issues_ViewFAQs_Label: "settings_Issues_ViewFAQs_Label",
            Settings_Issues_Title: "settings_Issues_Title",
            Settings_Issues_Tracker_Label: "settings_Issues_Tracker_Label",
            Settings_Issues_Tracker_Description: "settings_Issues_Tracker_Description",
            Settings_Issues_RaiseIssue_Label: "settings_Issues_RaiseIssue_Label",
            Settings_Issues_Log_Label: "settings_Issues_Log_Label",
            Settings_Issues_Log_Description: "settings_Issues_Log_Description",
            Settings_Issues_ClearLog_Label: "settings_Issues_ClearLog_Label",
            Settings_Issues_DownloadLog_Label: "settings_Issues_DownloadLog_Label",
            Settings_Issues_LogSize_Label: "settings_Issues_LogSize_Label",
            Settings_Permissions_Title: "settings_Permissions_Title",
            Settings_Permissions_ReadWebsiteData_Title: "settings_Permissions_ReadWebsiteData_Title",
            Settings_Permissions_ReadWebsiteData_Description: "settings_Permissions_ReadWebsiteData_Description",
            Settings_Permissions_ReadWebsiteData_Granted_Label: "settings_Permissions_ReadWebsiteData_Granted_Label",
            Settings_Permissions_ReadWebsiteData_NotGranted_Label: "settings_Permissions_ReadWebsiteData_NotGranted_Label",
            Settings_Service_Title: "settings_Service_Title",
            Settings_Service_Status_Label: "settings_Service_Status_Label",
            Settings_Service_Status_NoNewSyncs: "settings_Service_Status_NoNewSyncs",
            Settings_Service_Status_Error: "settings_Service_Status_Error",
            Settings_Service_Status_Loading: "settings_Service_Status_Loading",
            Settings_Service_Status_Online: "settings_Service_Status_Online",
            Settings_Service_Status_Offline: "settings_Service_Status_Offline",
            Settings_Service_UpdateForm_Message: "settings_Service_UpdateForm_Message",
            Settings_Service_UpdateForm_Field_Description: "settings_Service_UpdateForm_Field_Description",
            Settings_Service_UpdateForm_Confirm_Message: "settings_Service_UpdateForm_Confirm_Message",
            Settings_Service_UpdateForm_Required_Label: "settings_Service_UpdateForm_Required_Label",
            Settings_Service_UpdateForm_InvalidService_Label: "settings_Service_UpdateForm_InvalidService_Label",
            Settings_Service_UpdateForm_RequestFailed_Label: "settings_Service_UpdateForm_RequestFailed_Label",
            Settings_Service_UpdateForm_ServiceVersionNotSupported_Label: "settings_Service_UpdateForm_ServiceVersionNotSupported_Label",
            Settings_BackupRestore_Title: "settings_BackupRestore_Title",
            Settings_NotAvailable_Message: "settings_NotAvailable_Message",
            Settings_Prefs_Title: "settings_Prefs_Title",
            Settings_Prefs_SyncToolbar_Label: "settings_Prefs_SyncToolbar_Label",
            Settings_Prefs_SyncToolbar_Description: "settings_Prefs_SyncToolbar_Description",
            Settings_Prefs_CheckForAppUpdates_Label: "settings_Prefs_CheckForAppUpdates_Label",
            Settings_Prefs_CheckForAppUpdates_Description: "settings_Prefs_CheckForAppUpdates_Description",
            Settings_Prefs_SearchBar_Label: "settings_Prefs_SearchBar_Label",
            Settings_Prefs_SearchBar_Description: "settings_Prefs_SearchBar_Description",
            Updated_Message: "updated_Message",
            Updated_Title: "updated_Title",
            DownloadFile_Success_Message: "downloadFile_Success_Message",
            Settings_BackupRestore_RestoreSuccess_Message: "settings_BackupRestore_RestoreSuccess_Message",
            Settings_BackupRestore_RestoreForm_BackupFile_Description: "settings_BackupRestore_RestoreForm_BackupFile_Description",
            Settings_BackupRestore_RestoreForm_Message: "settings_BackupRestore_RestoreForm_Message",
            Settings_BackupRestore_RestoreForm_DataField_Label: "settings_BackupRestore_RestoreForm_DataField_Label",
            Settings_BackupRestore_RestoreForm_Invalid_Label: "settings_BackupRestore_RestoreForm_Invalid_Label",
            Settings_Sync_Title: "settings_Sync_Title",
            Settings_Sync_Id_Label: "settings_Sync_Id_Label",
            Settings_Sync_DisplayQRCode_Message: "settings_Sync_DisplayQRCode_Message",
            Settings_Service_DataUsage_Label: "settings_Service_DataUsage_Label",
            Settings_Service_DataUsage_Description: "settings_Service_DataUsage_Description",
            Settings_BackupRestore_ConfirmRestore_Sync_Message: "settings_BackupRestore_ConfirmRestore_Sync_Message",
            Settings_BackupRestore_ConfirmRestore_NoSync_Message: "settings_BackupRestore_ConfirmRestore_NoSync_Message",
            Bookmark_Title_Add: "bookmark_Title_Add",
            Bookmark_Title_Edit: "bookmark_Title_Edit",
            Bookmark_TitleField_Label: "bookmark_TitleField_Label",
            Bookmark_UrlField_Label: "bookmark_UrlField_Label",
            Bookmark_DescriptionField_Label: "bookmark_DescriptionField_Label",
            Bookmark_TagsField_Label: "bookmark_TagsField_Label",
            Bookmark_TagsField_Description: "bookmark_TagsField_Description",
            Bookmark_BookmarkForm_Required_Label: "bookmark_BookmarkForm_Required_Label",
            Bookmark_BookmarkForm_Exists_Label: "bookmark_BookmarkForm_Exists_Label",
            Qr_Copied_Label: "qr_Copied_Label",
            Qr_CopySyncId_Label: "qr_CopySyncId_Label",
            Qr_Message: "qr_Message",
            Working_Restoring_Message: "working_Restoring_Message",
            Working_Reverting_Message: "working_Reverting_Message",
            Working_Syncing_Message: "working_Syncing_Message",
            WorkingOffline_Title: "workingOffline_Title",
            WorkingOffline_Message: "workingOffline_Message",
            GetMetadata_Message: "getMetadata_Message",
            GetMetadata_Success_Message: "getMetadata_Success_Message",
            Button_Settings_Label: "button_Settings_Label",
            Button_AddBookmark_Label: "button_AddBookmark_Label",
            Button_DeleteBookmark_Label: "button_DeleteBookmark_Label",
            Button_EditBookmark_Label: "button_EditBookmark_Label",
            Button_ShareBookmark_Label: "button_ShareBookmark_Label",
            Button_Help_Label: "button_Help_Label",
            Button_Next_Label: "button_Next_Label",
            Button_Previous_Label: "button_Previous_Label",
            Button_UpdateService_Label: "button_UpdateService_Label",
            Button_ScanCode_Label: "button_ScanCode_Label",
            Button_ToggleLight_Label: "button_ToggleLight_Label",
            Button_DisableSync_Label: "button_DisableSync_Label",
            Button_EnableSync_Label: "button_EnableSync_Label",
            Button_ExistingSync_Label: "button_ExistingSync_Label",
            Button_NewSync_Label: "button_NewSync_Label",
            Button_GetSyncId_Label: "button_GetSyncId_Label",
            Button_SyncUpdates_Label: "button_SyncUpdates_Label",
            Button_Confirm_Label: "button_Confirm_Label",
            Button_Deny_Label: "button_Deny_Label",
            Button_ReleaseNotes_Label: "button_ReleaseNotes_Label",
            Button_Support_Label: "button_Support_Label",
            Button_Cryptos_Label: "button_Cryptos_Label",
            Button_Liberapay_Label: "button_Liberapay_Label",
            Button_Patreon_Label: "button_Patreon_Label",
            Button_AddTags_Label: "button_AddTags_Label",
            Button_DeleteTag_Label: "button_DeleteTag_Label",
            Button_Delete_Label: "button_Delete_Label",
            Button_Share_Label: "button_Share_Label",
            Button_UpdateBookmarkProperties_Label: "button_UpdateBookmarkProperties_Label",
            Button_ClearTags_Label: "button_ClearTags_Label",
            Button_SelectBackupFile_Label: "button_SelectBackupFile_Label",
            Button_RestoreData_Label: "button_RestoreData_Label",
            Button_RestoreData_Invalid_Label: "button_RestoreData_Invalid_Label",
            Button_RestoreData_Ready_Label: "button_RestoreData_Ready_Label",
            Button_Backup_Label: "button_Backup_Label",
            Button_Restore_Label: "button_Restore_Label",
            Button_Saving_Label: "button_Saving_Label",
            Button_Done_Label: "button_Done_Label",
            Button_Clear_Label: "button_Clear_Label",
            Button_ShowPassword_Label: "button_ShowPassword_Label",
            Button_Close_Label: "button_Close_Label",
            Button_Continue_Label: "button_Continue_Label",
            Button_Back_Label: "button_Back_Label",
            Button_OK_Label: "button_OK_Label",
            Button_Dismiss_Label: "button_Dismiss_Label",
            Button_Update_Label: "button_Update_Label",
            Button_Cancel_Label: "button_Cancel_Label",
            Button_UpdateServiceUrl_Label: "button_UpdateServiceUrl_Label",
            Button_Permissions_Remove_Label: "button_Permissions_Remove_Label",
            Button_Permissions_Add_Label: "button_Permissions_Add_Label",
            Button_SearchResults_Label: "button_SearchResults_Label",
            Button_BookmarkTree_Label: "button_BookmarkTree_Label",
            Button_Revert_Label: "button_Revert_Label",
            Button_View_Label: "button_View_Label",
            Bookmarks_Container_Menu_Title: "bookmarks_Container_Menu_Title",
            Bookmarks_Container_Mobile_Title: "bookmarks_Container_Mobile_Title",
            Bookmarks_Container_Other_Title: "bookmarks_Container_Other_Title",
            Bookmarks_Container_Toolbar_Title: "bookmarks_Container_Toolbar_Title",
            Error_Default_Title: "error_Default_Title",
            Error_Default_Message: "error_Default_Message",
            Error_HttpRequestFailed_Title: "error_HttpRequestFailed_Title",
            Error_HttpRequestFailed_Message: "error_HttpRequestFailed_Message",
            Error_TooManyRequests_Title: "error_TooManyRequests_Title",
            Error_TooManyRequests_Message: "error_TooManyRequests_Message",
            Error_RequestEntityTooLarge_Title: "error_RequestEntityTooLarge_Title",
            Error_RequestEntityTooLarge_Message: "error_RequestEntityTooLarge_Message",
            Error_NotAcceptingNewSyncs_Title: "error_NotAcceptingNewSyncs_Title",
            Error_NotAcceptingNewSyncs_Message: "error_NotAcceptingNewSyncs_Message",
            Error_DailyNewSyncLimitReached_Title: "error_DailyNewSyncLimitReached_Title",
            Error_DailyNewSyncLimitReached_Message: "error_DailyNewSyncLimitReached_Message",
            Error_MissingClientData_Title: "error_MissingClientData_Title",
            Error_MissingClientData_Message: "error_MissingClientData_Message",
            Error_InvalidCredentials_Title: "error_InvalidCredentials_Title",
            Error_InvalidCredentials_Message: "error_InvalidCredentials_Message",
            Error_SyncRemoved_Title: "error_SyncRemoved_Title",
            Error_SyncRemoved_Message: "error_SyncRemoved_Message",
            Error_NoDataToRestore_Title: "error_NoDataToRestore_Title",
            Error_NoDataToRestore_Message: "error_NoDataToRestore_Message",
            Error_LocalSyncError_Title: "error_LocalSyncError_Title",
            Error_LocalSyncError_Message: "error_LocalSyncError_Message",
            Error_OutOfSync_Title: "error_OutOfSync_Title",
            Error_OutOfSync_Message: "error_OutOfSync_Message",
            Error_InvalidService_Title: "error_InvalidService_Title",
            Error_InvalidService_Message: "error_InvalidService_Message",
            Error_ServiceOffline_Title: "error_ServiceOffline_Title",
            Error_ServiceOffline_Message: "error_ServiceOffline_Message",
            Error_UnsupportedServiceApiVersion_Title: "error_UnsupportedServiceApiVersion_Title",
            Error_UnsupportedServiceApiVersion_Message: "error_UnsupportedServiceApiVersion_Message",
            Error_ContainerChanged_Title: "error_ContainerChanged_Title",
            Error_ContainerChanged_Message: "error_ContainerChanged_Message",
            Error_LocalContainerNotFound_Title: "error_LocalContainerNotFound_Title",
            Error_LocalContainerNotFound_Message: "error_LocalContainerNotFound_Message",
            Error_FailedGetPageMetadata_Title: "error_FailedGetPageMetadata_Title",
            Error_FailedGetPageMetadata_Message: "error_FailedGetPageMetadata_Message",
            Error_ScanFailed_Message: "error_ScanFailed_Message",
            Error_ShareFailed_Title: "error_ShareFailed_Title",
            Error_FailedDownloadFile_Title: "error_FailedDownloadFile_Title",
            Error_FailedGetDataToRestore_Title: "error_FailedGetDataToRestore_Title",
            Error_FailedRestoreData_Title: "error_FailedRestoreData_Title",
            Error_FailedRestoreData_Message: "error_FailedRestoreData_Message",
            Error_FailedShareUrl_Title: "error_FailedShareUrl_Title",
            Error_FailedShareUrlNotSynced_Title: "error_FailedShareUrlNotSynced_Title",
            Error_FailedRefreshBookmarks_Title: "error_FailedRefreshBookmarks_Title",
            Error_UncommittedSyncs_Title: "error_UncommittedSyncs_Title",
            Error_UncommittedSyncs_Message: "error_UncommittedSyncs_Message"
        },
        ErrorCodes: {
            NetworkOffline: 1e4,
            HttpRequestFailed: 10001,
            HttpRequestCancelled: 10002,
            TooManyRequests: 10003,
            RequestEntityTooLarge: 10004,
            NotAcceptingNewSyncs: 10005,
            DailyNewSyncLimitReached: 10006,
            MissingClientData: 10100,
            AmbiguousSyncRequest: 10101,
            FailedGetLocalBookmarks: 10102,
            FailedCreateLocalBookmarks: 10103,
            FailedRemoveLocalBookmarks: 10104,
            FailedUpdateLocalBookmarks: 10105,
            NoDataFound: 10106,
            SyncRemoved: 10107,
            PasswordRemoved: 10108,
            InvalidCredentials: 10109,
            LocalBookmarkNotFound: 10110,
            XBookmarkNotFound: 10111,
            ContainerChanged: 10112,
            LocalContainerNotFound: 10113,
            DataOutOfSync: 10114,
            InvalidBookmarkIdsDetected: 10115,
            SyncUncommitted: 10200,
            InvalidService: 10300,
            UnsupportedServiceApiVersion: 10301,
            ServiceOffline: 10302,
            FailedGetPageMetadata: 10400,
            FailedSaveBackup: 10401,
            FailedScan: 10402,
            FailedShareBookmark: 10403,
            FailedDownloadFile: 10404,
            FailedGetDataToRestore: 10405,
            FailedRestoreData: 10406,
            FailedRefreshBookmarks: 10407,
            FailedShareUrl: 10500,
            FailedShareUrlNotSynced: 10501,
            FailedRegisterAutoUpdates: 10600,
            LocalStorageNotAvailable: 10700,
            NotImplemented: 10800
        },
        LogType: {
            Trace: 0,
            Warn: 1,
            Error: 2
        },
        LookaheadMinChars: 1,
        MinApiVersion: "1.1.3",
        Platforms: {
            Android: "android",
            Chrome: "chrome",
            Firefox: "firefox"
        },
        QrCode: {
            Delimiter: "|$$|"
        },
        Regex: {
            Url: /(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i
        },
        ReleaseNotesUrlStem: "https://github.com/xbrowsersync/app/releases/tag/v",
        ReleaseLatestUrl: "https://api.github.com/repos/xbrowsersync/app/releases/latest",
        SyncPollTimeout: 2e3,
        ServiceStatus: {
            Error: -1,
            Online: 1,
            Offline: 2,
            NoNewSyncs: 3
        },
        SyncType: {
            Push: 1,
            Pull: 2,
            Both: 3,
            Cancel: 4,
            Upgrade: 5
        },
        Title: "xBrowserSync",
        UpdateType: {
            Create: 1,
            Delete: 2,
            Update: 3,
            Move: 4
        },
        URL: {
            Bookmarks: "/bookmarks",
            Current: "/current",
            DefaultServiceUrl: "https://api.xbrowsersync.org",
            HttpRegex: "^https?://\\w+",
            LastUpdated: "/lastUpdated",
            ProtocolRegex: "^[\\w-]+:",
            ServiceInformation: "/info",
            ValidUrlRegex: "(\\w+://)?((www\\.)?[-a-zA-Z0-9@:%._\\+~#=]+\\.[a-z]+|(\\d{1,3}\\.){3}\\d{1,3})\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)",
            Version: "/version"
        }
    };
    return Global;
};

var xBrowserSync = xBrowserSync || {};

xBrowserSync.App = xBrowserSync.App || {};

xBrowserSync.App.Utility = function($http, $q, platform, globals) {
    "use strict";
    var currentMessageQueueItem, messageQueue = [];
    var asyncReduce = function(initialValue, itemArray, iterator) {
        return itemArray.reduce(function(promiseChain, currentItem) {
            return promiseChain.then(function(prevResult) {
                return iterator(prevResult, currentItem);
            });
        }, $q.resolve(initialValue));
    };
    var checkForNewVersion = function() {
        if (!isNetworkConnected()) {
            return $q.resolve();
        }
        return $http.get(globals.ReleaseLatestUrl).then(function(response) {
            var newVersion = response && response.data ? response.data.tag_name : null;
            if (compareVersions.compare(newVersion, globals.AppVersion, ">")) {
                logInfo(newVersion + " update available");
                return newVersion;
            }
        }).catch(function() {
            logInfo("Couldn’t check for new version");
        });
    };
    var closest = function(element, predicate) {
        return predicate(element) ? element : element && closest(element.parentNode, predicate);
    };
    var concatUint8Arrays = function concatUint8Arrays(firstArr, secondArr) {
        firstArr = firstArr || new Uint8Array();
        secondArr = secondArr || new Uint8Array();
        var totalLength = firstArr.length + secondArr.length;
        var result = new Uint8Array(totalLength);
        result.set(firstArr, 0);
        result.set(secondArr, firstArr.length);
        return result;
    };
    var createBackupData = function(bookmarksData, syncId, serviceUrl) {
        var data = {
            xbrowsersync: {
                date: getDateTimeString(new Date()),
                sync: {},
                data: {}
            }
        };
        if (syncId) {
            data.xbrowsersync.sync.id = syncId;
            data.xbrowsersync.sync.type = "xbrowsersync";
            data.xbrowsersync.sync.url = serviceUrl;
        }
        data.xbrowsersync.data.bookmarks = bookmarksData;
        return data;
    };
    var decryptData = function(encryptedData) {
        var encryptedDataBytes, iv;
        if (!encryptedData) {
            return $q.resolve("");
        }
        return platform.LocalStorage.Get([ globals.CacheKeys.Password, globals.CacheKeys.SyncId ]).then(function(cachedData) {
            var password = cachedData[globals.CacheKeys.Password];
            var syncId = cachedData[globals.CacheKeys.SyncId];
            if (!syncId) {
                return $q.reject({
                    code: globals.ErrorCodes.SyncRemoved
                });
            }
            if (!password) {
                return $q.reject({
                    code: globals.ErrorCodes.PasswordRemoved
                });
            }
            var keyData = base64js.toByteArray(password);
            var encryptedBytes = base64js.toByteArray(encryptedData);
            iv = encryptedBytes.slice(0, 16);
            encryptedDataBytes = encryptedBytes.slice(16).buffer;
            return crypto.subtle.importKey("raw", keyData, {
                name: "AES-GCM",
                iv: iv
            }, false, [ "decrypt" ]);
        }).then(function(key) {
            return crypto.subtle.decrypt({
                name: "AES-GCM",
                iv: iv
            }, key, encryptedDataBytes);
        }).then(function(decryptedBytes) {
            if (!decryptedBytes) {
                throw new Error("Unable to decrypt data.");
            }
            var decryptedData = LZUTF8.decompress(new Uint8Array(decryptedBytes));
            return decryptedData;
        }).catch(function(err) {
            logInfo("Decryption failed");
            return $q.reject({
                code: globals.ErrorCodes.InvalidCredentials,
                stack: err.stack
            });
        });
    };
    var deepCopy = function(obj) {
        return !obj || typeof obj !== "object" ? obj : _.isString(obj) ? String.prototype.slice.call(obj) : _.isDate(obj) ? new Date(obj.valueOf()) : _.isFunction(obj.clone) ? obj.clone() : _.isArray(obj) ? _.map(obj, function(t) {
            return deepCopy(t);
        }) : _.mapObject(obj, function(val, key) {
            return deepCopy(val);
        });
    };
    var encryptData = function(data) {
        var iv;
        if (!data) {
            return $q.resolve("");
        }
        return platform.LocalStorage.Get([ globals.CacheKeys.Password, globals.CacheKeys.SyncId ]).then(function(cachedData) {
            var password = cachedData[globals.CacheKeys.Password];
            var syncId = cachedData[globals.CacheKeys.SyncId];
            if (!syncId) {
                return $q.reject({
                    code: globals.ErrorCodes.SyncRemoved
                });
            }
            if (!password) {
                return $q.reject({
                    code: globals.ErrorCodes.PasswordRemoved
                });
            }
            var keyData = base64js.toByteArray(password);
            iv = crypto.getRandomValues(new Uint8Array(16));
            return crypto.subtle.importKey("raw", keyData, {
                name: "AES-GCM",
                iv: iv
            }, false, [ "encrypt" ]);
        }).then(function(key) {
            var compressedData = LZUTF8.compress(data);
            return crypto.subtle.encrypt({
                name: "AES-GCM",
                iv: iv
            }, key, compressedData);
        }).then(function(encryptedData) {
            var combinedData = concatUint8Arrays(iv, new Uint8Array(encryptedData));
            return base64js.fromByteArray(combinedData);
        }).catch(function(err) {
            logInfo("Encryption failed");
            return $q.reject({
                code: globals.ErrorCodes.InvalidCredentials,
                stack: err.stack
            });
        });
    };
    var get24hrTimeFromDate = function(date) {
        return date.toLocaleTimeString("en-GB", {
            hour: "2-digit",
            minute: "2-digit"
        });
    };
    var getBackupFileName = function() {
        var fileName = "xbs_backup_" + getDateTimeString(new Date()) + ".json";
        return fileName;
    };
    var getCountryNameFrom2LetterISOCode = function(isoCode) {
        if (!isoCode) {
            return null;
        }
        var country = Countries.countries[isoCode];
        if (!country) {
            logInfo("No country found matching ISO code: " + isoCode);
        }
        return country.name;
    };
    var getDateTimeString = function(date) {
        if (!date) {
            return "";
        }
        var second = ("0" + date.getSeconds()).slice(-2);
        var minute = ("0" + date.getMinutes()).slice(-2);
        var hour = ("0" + date.getHours()).slice(-2);
        var day = ("0" + date.getDate()).slice(-2);
        var month = ("0" + (date.getMonth() + 1)).slice(-2);
        var year = date.getFullYear();
        return year + month + day + hour + minute + second;
    };
    var getErrorMessageFromException = function(err) {
        var errorMessage = {
            title: "",
            message: ""
        };
        if (!err || !err.code) {
            errorMessage.title = platform.GetConstant(globals.Constants.Error_Default_Title);
            errorMessage.message = platform.GetConstant(globals.Constants.Error_Default_Message);
            return errorMessage;
        }
        err.details = !err.details ? "" : err.details;
        switch (err.code) {
          case globals.ErrorCodes.NetworkOffline:
          case globals.ErrorCodes.HttpRequestFailed:
            errorMessage.title = platform.GetConstant(globals.Constants.Error_HttpRequestFailed_Title);
            errorMessage.message = platform.GetConstant(globals.Constants.Error_HttpRequestFailed_Message);
            break;

          case globals.ErrorCodes.TooManyRequests:
            errorMessage.title = platform.GetConstant(globals.Constants.Error_TooManyRequests_Title);
            errorMessage.message = platform.GetConstant(globals.Constants.Error_TooManyRequests_Message);
            break;

          case globals.ErrorCodes.RequestEntityTooLarge:
            errorMessage.title = platform.GetConstant(globals.Constants.Error_RequestEntityTooLarge_Title);
            errorMessage.message = platform.GetConstant(globals.Constants.Error_RequestEntityTooLarge_Message);
            break;

          case globals.ErrorCodes.NotAcceptingNewSyncs:
            errorMessage.title = platform.GetConstant(globals.Constants.Error_NotAcceptingNewSyncs_Title);
            errorMessage.message = platform.GetConstant(globals.Constants.Error_NotAcceptingNewSyncs_Message);
            break;

          case globals.ErrorCodes.DailyNewSyncLimitReached:
            errorMessage.title = platform.GetConstant(globals.Constants.Error_DailyNewSyncLimitReached_Title);
            errorMessage.message = platform.GetConstant(globals.Constants.Error_DailyNewSyncLimitReached_Message);
            break;

          case globals.ErrorCodes.MissingClientData:
            errorMessage.title = platform.GetConstant(globals.Constants.Error_MissingClientData_Title);
            errorMessage.message = platform.GetConstant(globals.Constants.Error_MissingClientData_Message);
            break;

          case globals.ErrorCodes.NoDataFound:
            errorMessage.title = platform.GetConstant(globals.Constants.Error_InvalidCredentials_Title);
            errorMessage.message = platform.GetConstant(globals.Constants.Error_InvalidCredentials_Message);
            break;

          case globals.ErrorCodes.SyncRemoved:
            errorMessage.title = platform.GetConstant(globals.Constants.Error_SyncRemoved_Title);
            errorMessage.message = platform.GetConstant(globals.Constants.Error_SyncRemoved_Message);
            break;

          case globals.ErrorCodes.InvalidCredentials:
            errorMessage.title = platform.GetConstant(globals.Constants.Error_InvalidCredentials_Title);
            errorMessage.message = platform.GetConstant(globals.Constants.Error_InvalidCredentials_Message);
            break;

          case globals.ErrorCodes.ContainerChanged:
            errorMessage.title = platform.GetConstant(globals.Constants.Error_ContainerChanged_Title);
            errorMessage.message = platform.GetConstant(globals.Constants.Error_ContainerChanged_Message);
            break;

          case globals.ErrorCodes.LocalContainerNotFound:
            errorMessage.title = platform.GetConstant(globals.Constants.Error_LocalContainerNotFound_Title);
            errorMessage.message = platform.GetConstant(globals.Constants.Error_LocalContainerNotFound_Message);
            break;

          case globals.ErrorCodes.DataOutOfSync:
            errorMessage.title = platform.GetConstant(globals.Constants.Error_OutOfSync_Title);
            errorMessage.message = platform.GetConstant(globals.Constants.Error_OutOfSync_Message);
            break;

          case globals.ErrorCodes.InvalidService:
            errorMessage.title = platform.GetConstant(globals.Constants.Error_InvalidService_Title);
            errorMessage.message = platform.GetConstant(globals.Constants.Error_InvalidService_Message);
            break;

          case globals.ErrorCodes.ServiceOffline:
            errorMessage.title = platform.GetConstant(globals.Constants.Error_ServiceOffline_Title);
            errorMessage.message = platform.GetConstant(globals.Constants.Error_ServiceOffline_Message);
            break;

          case globals.ErrorCodes.UnsupportedServiceApiVersion:
            errorMessage.title = platform.GetConstant(globals.Constants.Error_UnsupportedServiceApiVersion_Title);
            errorMessage.message = platform.GetConstant(globals.Constants.Error_UnsupportedServiceApiVersion_Message);
            break;

          case globals.ErrorCodes.FailedGetPageMetadata:
            errorMessage.title = platform.GetConstant(globals.Constants.Error_FailedGetPageMetadata_Title);
            errorMessage.message = platform.GetConstant(globals.Constants.Error_FailedGetPageMetadata_Message);
            break;

          case globals.ErrorCodes.FailedScan:
            errorMessage.title = platform.GetConstant(globals.Constants.Error_ScanFailed_Message);
            break;

          case globals.ErrorCodes.FailedShareBookmark:
            errorMessage.title = platform.GetConstant(globals.Constants.Error_ShareFailed_Title);
            break;

          case globals.ErrorCodes.FailedDownloadFile:
            errorMessage.title = platform.GetConstant(globals.Constants.Error_FailedDownloadFile_Title);
            break;

          case globals.ErrorCodes.FailedGetDataToRestore:
            errorMessage.title = platform.GetConstant(globals.Constants.Error_FailedGetDataToRestore_Title);
            break;

          case globals.ErrorCodes.FailedRestoreData:
            errorMessage.title = platform.GetConstant(globals.Constants.Error_FailedRestoreData_Title);
            errorMessage.message = platform.GetConstant(globals.Constants.Error_FailedRestoreData_Message);
            break;

          case globals.ErrorCodes.FailedShareUrl:
            errorMessage.title = platform.GetConstant(globals.Constants.Error_FailedShareUrl_Title);
            break;

          case globals.ErrorCodes.FailedShareUrlNotSynced:
            errorMessage.title = platform.GetConstant(globals.Constants.Error_FailedShareUrlNotSynced_Title);
            break;

          case globals.ErrorCodes.FailedRefreshBookmarks:
            errorMessage.title = platform.GetConstant(globals.Constants.Error_FailedRefreshBookmarks_Title);
            break;

          case globals.ErrorCodes.SyncUncommitted:
            errorMessage.title = platform.GetConstant(globals.Constants.Error_UncommittedSyncs_Title);
            errorMessage.message = platform.GetConstant(globals.Constants.Error_UncommittedSyncs_Message);
            break;

          case globals.ErrorCodes.FailedCreateLocalBookmarks:
          case globals.ErrorCodes.FailedGetLocalBookmarks:
          case globals.ErrorCodes.FailedRemoveLocalBookmarks:
          case globals.ErrorCodes.LocalBookmarkNotFound:
          case globals.ErrorCodes.XBookmarkNotFound:
            errorMessage.title = platform.GetConstant(globals.Constants.Error_LocalSyncError_Title);
            errorMessage.message = platform.GetConstant(globals.Constants.Error_LocalSyncError_Message);
            break;

          default:
            errorMessage.title = platform.GetConstant(globals.Constants.Error_Default_Title);
            errorMessage.message = platform.GetConstant(globals.Constants.Error_Default_Message);
        }
        return errorMessage;
    };
    var getLogFileName = function() {
        var fileName = "xbs_log_" + getDateTimeString(new Date()) + ".txt";
        return fileName;
    };
    var getPasswordHash = function(password, salt) {
        var encoder = new TextEncoder("utf-8");
        var encodedSalt = encoder.encode(salt);
        return platform.LocalStorage.Get(globals.CacheKeys.SyncVersion).then(function(syncVersion) {
            if (!syncVersion) {
                return $q.resolve(password);
            }
            var keyData = encoder.encode(password);
            return crypto.subtle.importKey("raw", keyData, {
                name: "PBKDF2"
            }, false, [ "deriveKey" ]).then(function(importedKey) {
                return crypto.subtle.deriveKey({
                    name: "PBKDF2",
                    salt: encodedSalt,
                    iterations: 25e4,
                    hash: "SHA-256"
                }, importedKey, {
                    name: "AES-GCM",
                    length: 256
                }, true, [ "encrypt", "decrypt" ]);
            }).then(function(derivedKey) {
                return crypto.subtle.exportKey("raw", derivedKey);
            }).then(function(exportedKey) {
                var base64Key = base64js.fromByteArray(new Uint8Array(exportedKey));
                return base64Key;
            });
        });
    };
    var getServiceStatusTextFromStatusCode = function(statusCode) {
        if (statusCode == null) {
            return null;
        }
        switch (statusCode) {
          case globals.ServiceStatus.NoNewSyncs:
            return platform.GetConstant(globals.Constants.Settings_Service_Status_NoNewSyncs);

          case globals.ServiceStatus.Offline:
            return platform.GetConstant(globals.Constants.Settings_Service_Status_Offline);

          case globals.ServiceStatus.Online:
            return platform.GetConstant(globals.Constants.Settings_Service_Status_Online);

          case globals.ServiceStatus.Error:
          default:
            return platform.GetConstant(globals.Constants.Settings_Service_Status_Error);
        }
    };
    var getServiceUrl = function() {
        return platform.LocalStorage.Get(globals.CacheKeys.ServiceUrl).then(function(cachedServiceUrl) {
            return cachedServiceUrl || globals.URL.DefaultServiceUrl;
        });
    };
    var getTagArrayFromText = function(tagText) {
        if (!tagText) {
            return null;
        }
        var tags = tagText.toLowerCase().replace(/['"]/g, "").split(",");
        tags = _.chain(tags).map(function(tag) {
            return tag.trim();
        }).compact().uniq().sortBy(function(tag) {
            return tag;
        }).value();
        return tags;
    };
    var getUniqueishId = function() {
        return window.crypto.getRandomValues(new Uint32Array(1))[0].toString(36);
    };
    var getVersionTag = function() {
        var versionTag = globals.AppVersion.replace(/([a-z]+)\d+$/i, "$1");
        return versionTag;
    };
    var isMobilePlatform = function(platformName) {
        return platformName === globals.Platforms.Android;
    };
    var isNetworkConnected = function() {
        return window.Connection && window.navigator.connection && window.navigator.connection.type ? window.navigator.connection.type !== window.Connection.NONE && window.navigator.connection.type !== window.Connection.UNKNOWN : window.navigator.onLine;
    };
    var isNetworkConnectionError = function(err) {
        return err.code === globals.ErrorCodes.HttpRequestFailed || err.code === globals.ErrorCodes.NetworkOffline;
    };
    var isPlatform = function(currentPlatform, platformName) {
        return currentPlatform === platformName;
    };
    var logError = function(err, message) {
        var errMessage;
        if (!err || err.logged) {
            return;
        }
        if (err instanceof Error) {
            errMessage = message ? message + ": " : "";
        } else if (err.code) {
            var codeName = _.findKey(globals.ErrorCodes, function(key) {
                return key === err.code;
            });
            errMessage = message ? message + ": " : "";
            errMessage += "[" + err.code + "] " + codeName;
        }
        logToConsole(globals.LogType.Error, errMessage, err);
        messageQueue.push([ globals.LogType.Error, errMessage, err ]);
        processMessageQueue();
        err.logged = true;
    };
    var logInfo = function(message) {
        if (!message) {
            return;
        }
        logToConsole(globals.LogType.Trace, message);
        messageQueue.push([ globals.LogType.Trace, message ]);
        processMessageQueue();
    };
    var logToConsole = function(messageType, message, err) {
        switch (messageType) {
          case globals.LogType.Error:
            if (err instanceof Error) {
                console.error(message, err);
            } else if (err.stack) {
                console.error(message, err.stack);
            } else {
                console.error(message);
            }
            break;

          case globals.LogType.Warn:
            console.warn(message);
            break;

          case globals.LogType.Trace:
          default:
            console.info(message);
        }
    };
    var logWarning = function(message) {
        if (!message) {
            return;
        }
        logToConsole(globals.LogType.Warn, message);
        messageQueue.push([ globals.LogType.Warn, message ]);
        processMessageQueue();
    };
    var parseUrl = function(url) {
        var parser = document.createElement("a"), searchObject = {}, queries, split, i;
        parser.href = url;
        queries = parser.search.replace(/^\?/, "").split("&");
        for (i = 0; i < queries.length; i++) {
            split = queries[i].split("=");
            searchObject[split[0]] = split[1];
        }
        return {
            protocol: parser.protocol,
            host: parser.host,
            hostname: parser.hostname,
            port: parser.port,
            pathname: parser.pathname,
            search: parser.search,
            searchObject: searchObject,
            hash: parser.hash
        };
    };
    var processMessageQueue = function() {
        if (currentMessageQueueItem || messageQueue.length === 0) {
            return;
        }
        currentMessageQueueItem = messageQueue.shift();
        var messageType = currentMessageQueueItem[0];
        var message = currentMessageQueueItem[1];
        var err = currentMessageQueueItem[2];
        var messageLogText = new Date().toISOString().replace(/[A-Z]/g, " ").trim() + "\t";
        switch (messageType) {
          case globals.LogType.Error:
            messageLogText += "[error]\t";
            break;

          case globals.LogType.Warn:
            messageLogText += "[warn]\t";
            break;

          case globals.LogType.Trace:
          default:
            messageLogText += "[trace]\t";
        }
        return platform.LocalStorage.Get(globals.CacheKeys.TraceLog).then(function(debugMessageLog) {
            debugMessageLog = debugMessageLog || [];
            messageLogText += typeof message === "object" ? JSON.stringify(message) : message;
            if (err && err.stack) {
                messageLogText += "\t" + err.stack.replace(/\s+/g, " ");
            }
            debugMessageLog.push(messageLogText);
            return platform.LocalStorage.Set(globals.CacheKeys.TraceLog, debugMessageLog);
        }).then(function() {
            currentMessageQueueItem = undefined;
            processMessageQueue();
        });
    };
    var promiseWhile = function(data, condition, action) {
        var whilst = function(data) {
            return condition(data).then(function(conditionIsTrue) {
                if (conditionIsTrue) {
                    return $q.resolve(data);
                }
                return action(data).then(whilst);
            });
        };
        return whilst(data);
    };
    var stripTags = function(str) {
        return str ? str.replace(/<(?:.|\n)*?>/gm, "") : str;
    };
    var syncIdIsValid = function(syncId) {
        if (!syncId) {
            return false;
        }
        var hexStringToBytes = function(hexString) {
            var bytes = new Uint8Array(hexString.length / 2);
            for (var i = 0; i !== bytes.length; i++) {
                bytes[i] = parseInt(hexString.substr(i * 2, 2), 16);
            }
            return bytes;
        };
        var bytesToGuidString = function(bytes) {
            var _a;
            var _b;
            var _c;
            var _d;
            var _e;
            var _f;
            var _g;
            var _h;
            var _i;
            var _j;
            var _k;
            if (bytes == null) {
                return;
            }
            if (bytes.length != 16) {
                return;
            }
            _a = bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
            _b = bytes[5] << 8 | bytes[4];
            _c = bytes[7] << 8 | bytes[6];
            _d = bytes[8];
            _e = bytes[9];
            _f = bytes[10];
            _g = bytes[11];
            _h = bytes[12];
            _i = bytes[13];
            _j = bytes[14];
            _k = bytes[15];
            var hexToChar = function(a) {
                a = a & 15;
                return String.fromCharCode(a > 9 ? a - 10 + 97 : a + 48);
            };
            var hexsToChars = function(guidChars, offset, a, b, hex) {
                hex = hex === undefined ? false : hex;
                if (hex) {
                    guidChars[offset++] = "0";
                    guidChars[offset++] = "x";
                }
                guidChars[offset++] = hexToChar(a >> 4);
                guidChars[offset++] = hexToChar(a);
                if (hex) {
                    guidChars[offset++] = ",";
                    guidChars[offset++] = "0";
                    guidChars[offset++] = "x";
                }
                guidChars[offset++] = hexToChar(b >> 4);
                guidChars[offset++] = hexToChar(b);
                return offset;
            };
            var _toString = function(format) {
                if (format == null || format.length == 0) format = "D";
                var guidChars = [];
                var offset = 0;
                var dash = true;
                var hex = false;
                if (format.length != 1) {
                    return null;
                }
                var formatCh = format[0];
                if (formatCh == "D" || formatCh == "d") {
                    guidChars = new Array(36);
                } else if (formatCh == "N" || formatCh == "n") {
                    guidChars = new Array(32);
                    dash = false;
                } else if (formatCh == "B" || formatCh == "b") {
                    guidChars = new Array(38);
                    guidChars[offset++] = "{";
                    guidChars[37] = "}";
                } else if (formatCh == "P" || formatCh == "p") {
                    guidChars = new Array(38);
                    guidChars[offset++] = "(";
                    guidChars[37] = ")";
                } else if (formatCh == "X" || formatCh == "x") {
                    guidChars = new Array(68);
                    guidChars[offset++] = "{";
                    guidChars[67] = "}";
                    dash = false;
                    hex = true;
                } else {
                    return null;
                }
                if (hex) {
                    guidChars[offset++] = "0";
                    guidChars[offset++] = "x";
                    offset = hexsToChars(guidChars, offset, _a >> 24, _a >> 16);
                    offset = hexsToChars(guidChars, offset, _a >> 8, _a);
                    guidChars[offset++] = ",";
                    guidChars[offset++] = "0";
                    guidChars[offset++] = "x";
                    offset = hexsToChars(guidChars, offset, _b >> 8, _b);
                    guidChars[offset++] = ",";
                    guidChars[offset++] = "0";
                    guidChars[offset++] = "x";
                    offset = hexsToChars(guidChars, offset, _c >> 8, _c);
                    guidChars[offset++] = ",";
                    guidChars[offset++] = "{";
                    offset = hexsToChars(guidChars, offset, _d, _e, true);
                    guidChars[offset++] = ",";
                    offset = hexsToChars(guidChars, offset, _f, _g, true);
                    guidChars[offset++] = ",";
                    offset = hexsToChars(guidChars, offset, _h, _i, true);
                    guidChars[offset++] = ",";
                    offset = hexsToChars(guidChars, offset, _j, _k, true);
                    guidChars[offset++] = "}";
                } else {
                    offset = hexsToChars(guidChars, offset, _a >> 24, _a >> 16);
                    offset = hexsToChars(guidChars, offset, _a >> 8, _a);
                    if (dash) guidChars[offset++] = "-";
                    offset = hexsToChars(guidChars, offset, _b >> 8, _b);
                    if (dash) guidChars[offset++] = "-";
                    offset = hexsToChars(guidChars, offset, _c >> 8, _c);
                    if (dash) guidChars[offset++] = "-";
                    offset = hexsToChars(guidChars, offset, _d, _e);
                    if (dash) guidChars[offset++] = "-";
                    offset = hexsToChars(guidChars, offset, _f, _g);
                    offset = hexsToChars(guidChars, offset, _h, _i);
                    offset = hexsToChars(guidChars, offset, _j, _k);
                }
                return guidChars.join("");
            };
            return _toString("D", null).split(",").join("");
        };
        return !!bytesToGuidString(hexStringToBytes(syncId));
    };
    var trimToNearestWord = function(text, limit) {
        if (!text) {
            return "";
        }
        text = text.trim();
        if (limit >= text.length) {
            return text;
        }
        var trimmedText = text.substring(0, text.lastIndexOf(" ", limit)) + "…";
        return trimmedText;
    };
    return {
        AsyncReduce: asyncReduce,
        Closest: closest,
        CheckForNewVersion: checkForNewVersion,
        CreateBackupData: createBackupData,
        DecryptData: decryptData,
        EncryptData: encryptData,
        DeepCopy: deepCopy,
        Get24hrTimeFromDate: get24hrTimeFromDate,
        GetBackupFileName: getBackupFileName,
        GetCountryNameFrom2LetterISOCode: getCountryNameFrom2LetterISOCode,
        GetDateTimeString: getDateTimeString,
        GetErrorMessageFromException: getErrorMessageFromException,
        GetLogFileName: getLogFileName,
        GetServiceStatusTextFromStatusCode: getServiceStatusTextFromStatusCode,
        GetServiceUrl: getServiceUrl,
        GetTagArrayFromText: getTagArrayFromText,
        GetPasswordHash: getPasswordHash,
        GetUniqueishId: getUniqueishId,
        GetVersionTag: getVersionTag,
        IsMobilePlatform: isMobilePlatform,
        IsNetworkConnected: isNetworkConnected,
        IsNetworkConnectionError: isNetworkConnectionError,
        IsPlatform: isPlatform,
        LogError: logError,
        LogInfo: logInfo,
        LogWarning: logWarning,
        ParseUrl: parseUrl,
        PromiseWhile: promiseWhile,
        StripTags: stripTags,
        SyncIdIsValid: syncIdIsValid,
        TrimToNearestWord: trimToNearestWord
    };
};

var xBrowserSync = xBrowserSync || {};

xBrowserSync.App = xBrowserSync.App || {};

xBrowserSync.App.HttpInterceptor = function($q, globals) {
    "use strict";
    var httpInterceptor = function() {
        return {
            request: function(config) {
                if (config.url !== globals.ReleaseLatestUrl) {
                    config.headers["Accept-Version"] = globals.MinApiVersion;
                }
                config.timeout = !config.timeout ? 1e4 : config.timeout;
                return config || $q.when(config);
            }
        };
    };
    return httpInterceptor();
};

var xBrowserSync = xBrowserSync || {};

xBrowserSync.App = xBrowserSync.App || {};

xBrowserSync.App.API = function($http, $q, platform, globals, utility) {
    "use strict";
    var skipOnlineCheck = false;
    var checkServiceStatus = function(url) {
        var data;
        return checkNetworkIsOnline().then(function() {
            return (!url ? utility.GetServiceUrl() : $q.resolve(url)).then(function(serviceUrl) {
                return $http({
                    method: "GET",
                    url: serviceUrl + globals.URL.ServiceInformation,
                    timeout: 3e3
                }).catch(function(response) {
                    apiRequestFailed(new Error(getHttpErrorMessageFromHttpStatus(response.status)));
                });
            }).then(apiRequestSucceeded).then(function(response) {
                data = response.data;
                if (!data || data.status == null || data.version == null) {
                    apiRequestFailed(new Error(getHttpErrorMessageFromErrorCode(globals.ErrorCodes.InvalidService)));
                }
                if (compareVersions.compare(data.version, globals.MinApiVersion, "<")) {
                    apiRequestFailed(new Error(getHttpErrorMessageFromErrorCode(globals.ErrorCodes.UnsupportedServiceApiVersion)));
                }
                return data;
            });
        });
    };
    var createNewSync = function() {
        var data;
        return checkNetworkIsOnline().then(function() {
            return utility.GetServiceUrl().then(function(serviceUrl) {
                var data = {
                    version: globals.AppVersion
                };
                return $http.post(serviceUrl + globals.URL.Bookmarks, JSON.stringify(data)).catch(function(response) {
                    apiRequestFailed(new Error(getHttpErrorMessageFromHttpStatus(response.status)), true);
                });
            }).then(apiRequestSucceeded).then(function(response) {
                data = response.data;
                if (!data || !data.id || !data.lastUpdated || !data.version) {
                    apiRequestFailed(new Error(getHttpErrorMessageFromErrorCode(globals.ErrorCodes.NoDataFound)));
                }
                return data;
            });
        });
    };
    var getBookmarks = function() {
        var data, password, syncId;
        return platform.LocalStorage.Get([ globals.CacheKeys.Password, globals.CacheKeys.SyncId ]).then(function(cachedData) {
            password = cachedData[globals.CacheKeys.Password];
            syncId = cachedData[globals.CacheKeys.SyncId];
            if (!password || !syncId) {
                return $q.reject({
                    code: globals.ErrorCodes.MissingClientData
                });
            }
            return checkNetworkIsOnline().then(function() {
                return utility.GetServiceUrl().then(function(serviceUrl) {
                    return $http.get(serviceUrl + globals.URL.Bookmarks + "/" + syncId).catch(function(response) {
                        apiRequestFailed(new Error(getHttpErrorMessageFromHttpStatus(response.status)), true);
                    });
                }).then(apiRequestSucceeded).then(function(response) {
                    data = response.data;
                    if (!data || !data.lastUpdated) {
                        apiRequestFailed(new Error(getHttpErrorMessageFromErrorCode(globals.ErrorCodes.NoDataFound)));
                    }
                    return data;
                });
            });
        });
    };
    var getBookmarksLastUpdated = function() {
        var data, password, syncId;
        return platform.LocalStorage.Get([ globals.CacheKeys.Password, globals.CacheKeys.SyncId ]).then(function(cachedData) {
            password = cachedData[globals.CacheKeys.Password];
            syncId = cachedData[globals.CacheKeys.SyncId];
            if (!password || !syncId) {
                return $q.reject({
                    code: globals.ErrorCodes.MissingClientData
                });
            }
            return checkNetworkIsOnline().then(function() {
                return utility.GetServiceUrl().then(function(serviceUrl) {
                    return $http.get(serviceUrl + globals.URL.Bookmarks + "/" + syncId + globals.URL.LastUpdated).catch(function(response) {
                        apiRequestFailed(new Error(getHttpErrorMessageFromHttpStatus(response.status)), true);
                    });
                }).then(apiRequestSucceeded).then(function(response) {
                    data = response.data;
                    if (!data || !data.lastUpdated) {
                        apiRequestFailed(new Error(getHttpErrorMessageFromErrorCode(globals.ErrorCodes.NoDataFound)));
                    }
                    return data;
                });
            });
        });
    };
    var getBookmarksVersion = function(syncId) {
        var data;
        return checkNetworkIsOnline().then(function() {
            return utility.GetServiceUrl().then(function(serviceUrl) {
                return $http.get(serviceUrl + globals.URL.Bookmarks + "/" + syncId + globals.URL.Version).catch(function(response) {
                    apiRequestFailed(new Error(getHttpErrorMessageFromHttpStatus(response.status)), true);
                });
            }).then(apiRequestSucceeded).then(function(response) {
                data = response.data;
                if (!data) {
                    apiRequestFailed(new Error(getHttpErrorMessageFromErrorCode(globals.ErrorCodes.NoDataFound)));
                }
                return data;
            });
        });
    };
    var updateBookmarks = function(encryptedBookmarks, updateSyncVersion, backgroundUpdate) {
        var data, password, cachedLastUpdated, syncId;
        return platform.LocalStorage.Get([ globals.CacheKeys.LastUpdated, globals.CacheKeys.Password, globals.CacheKeys.SyncId ]).then(function(cachedData) {
            cachedLastUpdated = cachedData[globals.CacheKeys.LastUpdated];
            password = cachedData[globals.CacheKeys.Password];
            syncId = cachedData[globals.CacheKeys.SyncId];
            if (!cachedLastUpdated || !password || !syncId) {
                return $q.reject({
                    code: globals.ErrorCodes.MissingClientData
                });
            }
            skipOnlineCheck = !!backgroundUpdate;
            return checkNetworkIsOnline().then(function() {
                return utility.GetServiceUrl().then(function(serviceUrl) {
                    var data = {
                        bookmarks: encryptedBookmarks,
                        lastUpdated: cachedLastUpdated
                    };
                    if (updateSyncVersion) {
                        data.version = globals.AppVersion;
                    }
                    return $http.put(serviceUrl + globals.URL.Bookmarks + "/" + syncId, JSON.stringify(data)).catch(function(response) {
                        apiRequestFailed(new Error(getHttpErrorMessageFromHttpStatus(response.status)), true);
                    });
                }).then(apiRequestSucceeded).then(function(response) {
                    data = response.data;
                    if (!data || !data.lastUpdated) {
                        apiRequestFailed(new Error(getHttpErrorMessageFromErrorCode(globals.ErrorCodes.NoDataFound)));
                    }
                    return data;
                });
            });
        });
    };
    var apiRequestFailed = function(err, invalidServiceIsServiceOffline) {
        utility.LogError(err);
        var codeName = err.message.match(/\w+$/)[0];
        err.code = globals.ErrorCodes[codeName];
        if (invalidServiceIsServiceOffline && err.code === globals.ErrorCodes.InvalidService) {
            err.code = globals.ErrorCodes.ServiceOffline;
        }
        throw err;
    };
    var apiRequestSucceeded = function(response) {
        skipOnlineCheck = false;
        return $q.resolve(response);
    };
    var checkNetworkIsOnline = function() {
        return $q(function(resolve, reject) {
            if (skipOnlineCheck || utility.IsNetworkConnected()) {
                return resolve();
            }
            utility.LogWarning("API request failed: network offline");
            return reject({
                code: globals.ErrorCodes.NetworkOffline
            });
        });
    };
    var getErrorCodeFromHttpStatus = function(httpStatus) {
        var errorCode;
        switch (httpStatus) {
          case 401:
            errorCode = globals.ErrorCodes.NoDataFound;
            break;

          case 404:
            errorCode = globals.ErrorCodes.InvalidService;
            break;

          case 405:
            errorCode = globals.ErrorCodes.NotAcceptingNewSyncs;
            break;

          case 406:
            errorCode = globals.ErrorCodes.DailyNewSyncLimitReached;
            break;

          case 409:
            errorCode = globals.ErrorCodes.DataOutOfSync;
            break;

          case 413:
            errorCode = globals.ErrorCodes.RequestEntityTooLarge;
            break;

          case 429:
            errorCode = globals.ErrorCodes.TooManyRequests;
            break;

          case 503:
            errorCode = globals.ErrorCodes.ServiceOffline;
            break;

          case -1:
            errorCode = globals.ErrorCodes.HttpRequestFailed;
            break;

          default:
            errorCode = globals.ErrorCodes.HttpRequestFailed;
        }
        return errorCode;
    };
    var getHttpErrorMessageFromErrorCode = function(errorCode) {
        var codeName = _.findKey(globals.ErrorCodes, function(key) {
            return key === errorCode;
        });
        var message = "[" + errorCode + "] " + codeName;
        return message;
    };
    var getHttpErrorMessageFromHttpStatus = function(httpStatus) {
        var errorCode = getErrorCodeFromHttpStatus(httpStatus);
        return getHttpErrorMessageFromErrorCode(errorCode);
    };
    return {
        CheckServiceStatus: checkServiceStatus,
        CreateNewSync: createNewSync,
        GetBookmarks: getBookmarks,
        GetBookmarksLastUpdated: getBookmarksLastUpdated,
        GetBookmarksVersion: getBookmarksVersion,
        UpdateBookmarks: updateBookmarks
    };
};

var xBrowserSync = xBrowserSync || {};

xBrowserSync.App = xBrowserSync.App || {};

xBrowserSync.App.Bookmarks = function($q, $timeout, platform, globals, api, utility) {
    "use strict";
    var cachedBookmarks_encrypted, cachedBookmarks_plain, currentSync, syncQueue = [];
    var addNewInXBookmarks = function(createdBookmarkInfo, containerName, indexPath, xBookmarks) {
        var updatedBookmarks = utility.DeepCopy(xBookmarks);
        try {
            var container = getContainer(containerName, updatedBookmarks, true);
            if (!container) {
                throw new Error();
            }
            var parent = indexPath.slice(0, -1).reduce(function(previous, indexPathPosition) {
                return previous.children[indexPathPosition];
            }, container);
            if (!parent) {
                throw new Error();
            }
            var newXBookmark = isSeparator(createdBookmarkInfo) ? new xSeparator() : new xBookmark(createdBookmarkInfo.title, createdBookmarkInfo.url || null, createdBookmarkInfo.description, createdBookmarkInfo.tags, createdBookmarkInfo.children);
            newXBookmark.id = createdBookmarkInfo.id || getNewBookmarkId(xBookmarks, [ container.id ]);
            var cleanedBookmark = cleanBookmark(newXBookmark);
            parent.children.splice(indexPath.slice().pop(), 0, cleanedBookmark);
        } catch (err) {
            return $q.reject({
                code: globals.ErrorCodes.XBookmarkNotFound,
                stack: err.stack
            });
        }
        return $q.resolve({
            bookmarks: updatedBookmarks
        });
    };
    var checkIfRefreshSyncedDataOnError = function(err) {
        return err && (err.code === globals.ErrorCodes.ContainerChanged || err.code === globals.ErrorCodes.DataOutOfSync || err.code === globals.ErrorCodes.FailedCreateLocalBookmarks || err.code === globals.ErrorCodes.FailedGetLocalBookmarks || err.code === globals.ErrorCodes.FailedRemoveLocalBookmarks || err.code === globals.ErrorCodes.LocalBookmarkNotFound || err.code === globals.ErrorCodes.XBookmarkNotFound);
    };
    var checkForUpdates = function() {
        return platform.LocalStorage.Get(globals.CacheKeys.LastUpdated).then(function(cachedData) {
            var cachedLastUpdated = new Date(cachedData);
            return api.GetBookmarksLastUpdated().then(function(data) {
                var remoteLastUpdated = new Date(data.lastUpdated);
                var updatesAvailable = !cachedLastUpdated || cachedLastUpdated.getTime() !== remoteLastUpdated.getTime();
                if (updatesAvailable) {
                    utility.LogInfo("Updates available, local:" + (cachedLastUpdated ? cachedLastUpdated.toISOString() : "none") + " remote:" + remoteLastUpdated.toISOString());
                }
                return updatesAvailable;
            });
        });
    };
    var cleanBookmark = function(originalBookmark) {
        var copy = utility.DeepCopy(originalBookmark);
        var cleanedBookmark = _.pick(copy, function(value, key) {
            return _.isArray(value) && key !== "children" || _.isString(value) ? value.length > 0 : value != null;
        });
        return cleanedBookmark;
    };
    var convertLocalBookmarkToXBookmark = function(localBookmark, xBookmarks, takenIds) {
        takenIds = takenIds || [];
        if (!localBookmark) {
            return null;
        }
        var bookmark;
        if (isSeparator(localBookmark)) {
            bookmark = new xSeparator();
        } else {
            bookmark = new xBookmark(localBookmark.title, localBookmark.url);
        }
        bookmark.id = getNewBookmarkId(xBookmarks, takenIds);
        takenIds.push(bookmark.id);
        if (localBookmark.children && localBookmark.children.length > 0) {
            bookmark.children = localBookmark.children.map(function(childBookmark) {
                return convertLocalBookmarkToXBookmark(childBookmark, xBookmarks, takenIds);
            });
        }
        return bookmark;
    };
    var disableSync = function() {
        return platform.LocalStorage.Get(globals.CacheKeys.SyncEnabled).then(function(syncEnabled) {
            if (!syncEnabled) {
                return;
            }
            platform.EventListeners.Disable();
            platform.AutomaticUpdates.Stop();
            syncQueue = [];
            setIsSyncing();
            return $q.all([ platform.LocalStorage.Set(globals.CacheKeys.Bookmarks), platform.LocalStorage.Set(globals.CacheKeys.Password), platform.LocalStorage.Set(globals.CacheKeys.SyncEnabled, false), platform.LocalStorage.Set(globals.CacheKeys.SyncVersion), updateCachedBookmarks(null, null) ]).then(function() {
                platform.Interface.Refresh();
                utility.LogInfo("Sync disabled");
            });
        });
    };
    var eachBookmark = function(bookmarks, iteratee) {
        (function iterateBookmarks(bookmarksToIterate) {
            for (var i = 0; i < bookmarksToIterate.length; i++) {
                iteratee(bookmarksToIterate[i]);
                if (bookmarksToIterate[i].children && bookmarksToIterate[i].children.length > 0) {
                    iterateBookmarks(bookmarksToIterate[i].children);
                }
            }
        })(bookmarks);
    };
    var enableSync = function() {
        return $q.all([ platform.LocalStorage.Set(globals.CacheKeys.SyncEnabled, true), platform.EventListeners.Enable(), platform.AutomaticUpdates.Start() ]);
    };
    var executeSync = function(isBackgroundSync) {
        return platform.LocalStorage.Get(globals.CacheKeys.SyncEnabled).then(function(syncEnabled) {
            if (!syncEnabled) {
                return $q.reject(globals.ErrorCodes.SyncNotEnabled);
            }
            return (syncQueue.length === 0 ? checkForUpdates() : $q.resolve()).then(function(updatesAvailable) {
                if (updatesAvailable) {
                    return queueSync({
                        type: globals.SyncType.Pull
                    });
                }
            }).then(function() {
                return processSyncQueue(isBackgroundSync);
            });
        });
    };
    var exportBookmarks = function() {
        var cleanRecursive = function(bookmarks) {
            return bookmarks.map(function(bookmark) {
                var cleanedBookmark = cleanBookmark(bookmark);
                if (_.isArray(cleanedBookmark.children)) {
                    cleanedBookmark.children = cleanRecursive(cleanedBookmark.children);
                }
                return cleanedBookmark;
            });
        };
        return platform.LocalStorage.Get(globals.CacheKeys.SyncEnabled).then(function(syncEnabled) {
            if (!syncEnabled) {
                return platform.Bookmarks.Get(false);
            } else {
                return api.GetBookmarks().then(function(data) {
                    return utility.DecryptData(data.bookmarks);
                }).then(function(decryptedData) {
                    var bookmarks = removeEmptyContainers(JSON.parse(decryptedData));
                    return cleanRecursive(bookmarks);
                });
            }
        });
    };
    var findBookmarkById = function(bookmarks, id) {
        if (!bookmarks) {
            return;
        }
        var bookmark;
        var index = bookmarks.findIndex(function(x) {
            return x.id === id;
        });
        if (index === -1) {
            _.each(bookmarks, function(x) {
                if (!bookmark) {
                    bookmark = findBookmarkById(x.children, id);
                }
            });
        } else {
            bookmark = bookmarks[index];
            if (bookmark.index != null) {
                bookmark.index = index;
            }
        }
        return bookmark;
    };
    var findCurrentUrlInBookmarks = function() {
        var currentUrl;
        return platform.GetCurrentUrl().then(function(result) {
            if (!result) {
                return;
            }
            currentUrl = result;
            return searchBookmarks({
                url: currentUrl
            }).then(function(results) {
                var result = _.find(results, function(bookmark) {
                    return bookmark.url.toLowerCase() === currentUrl.toLowerCase();
                });
                return $q.resolve(result);
            });
        });
    };
    var getCurrentSync = function() {
        return syncQueue.length === 0 ? currentSync : syncQueue[syncQueue.length - 1];
    };
    var getContainer = function(containerName, bookmarks, createIfNotPresent) {
        var container = _.findWhere(bookmarks, {
            title: containerName
        });
        if (!container && createIfNotPresent) {
            container = new xBookmark(containerName);
            container.id = getNewBookmarkId(bookmarks);
            bookmarks.push(container);
        }
        return container;
    };
    var getBookmarkTitleForDisplay = function(bookmark) {
        if (bookmark.url) {
            return bookmark.title ? bookmark.title : bookmark.url.replace(/^https?:\/\//i, "");
        }
        if (!xBookmarkIsContainer(bookmark)) {
            return bookmark.title;
        }
        var containerTitle = undefined + "";
        switch (bookmark.title) {
          case globals.Bookmarks.MenuContainerName:
            containerTitle = platform.GetConstant(globals.Constants.Bookmarks_Container_Menu_Title);
            break;

          case globals.Bookmarks.MobileContainerName:
            containerTitle = platform.GetConstant(globals.Constants.Bookmarks_Container_Mobile_Title);
            break;

          case globals.Bookmarks.OtherContainerName:
            containerTitle = platform.GetConstant(globals.Constants.Bookmarks_Container_Other_Title);
            break;

          case globals.Bookmarks.ToolbarContainerName:
            containerTitle = platform.GetConstant(globals.Constants.Bookmarks_Container_Toolbar_Title);
            break;
        }
        return containerTitle;
    };
    var getExistingInXBookmarks = function(containerName, indexPath, xBookmarks) {
        var bookmark;
        try {
            var container = getContainer(containerName, xBookmarks);
            if (!container) {
                throw new Error();
            }
            var parent = indexPath.slice(0, -1).reduce(function(previous, indexPathPosition) {
                return previous.children[indexPathPosition];
            }, container);
            if (!parent) {
                throw new Error();
            }
            bookmark = utility.DeepCopy(parent.children[indexPath.slice().pop()]);
            if (!bookmark) {
                throw new Error();
            }
        } catch (err) {
            return $q.reject({
                code: globals.ErrorCodes.XBookmarkNotFound,
                stack: err.stack
            });
        }
        return $q.resolve({
            bookmark: bookmark,
            bookmarks: xBookmarks
        });
    };
    var getLookahead = function(word, bookmarksToSearch, tagsOnly, exclusions) {
        var getBookmarks;
        var deferred = $q.defer();
        if (!word) {
            return deferred.resolve();
        }
        if (bookmarksToSearch && bookmarksToSearch.length > 0) {
            getBookmarks = $q.resolve(bookmarksToSearch);
        } else {
            getBookmarks = getCachedBookmarks();
        }
        getBookmarks.then(function(bookmarks) {
            var lookaheads = searchBookmarksForLookaheads(bookmarks, word, tagsOnly);
            if (exclusions) {
                lookaheads = _.difference(lookaheads, exclusions);
            }
            if (lookaheads.length === 0) {
                deferred.resolve(null);
            }
            var lookahead = _.chain(lookaheads).sortBy(function(lookahead) {
                return lookahead.length;
            }).countBy().pairs().max(_.last).first().value();
            deferred.resolve([ lookahead, word ]);
        }).catch(function(err) {
            if (err && err.code && err.code === globals.ErrorCodes.HttpRequestCancelled) {
                return;
            }
            deferred.reject(err);
        });
        return deferred.promise;
    };
    var getNewBookmarkId = function(bookmarks, takenIds) {
        var highestId = 0;
        takenIds = takenIds || [ 0 ];
        eachBookmark(bookmarks, function(bookmark) {
            if (!_.isUndefined(bookmark.id) && bookmark.id > highestId) {
                highestId = bookmark.id;
            }
        });
        highestId = _.max(takenIds) > highestId ? _.max(takenIds) : highestId;
        return parseInt(highestId) + 1;
    };
    var getSyncBookmarksToolbar = function() {
        return platform.LocalStorage.Get(globals.CacheKeys.SyncBookmarksToolbar).then(function(syncBookmarksToolbar) {
            if (syncBookmarksToolbar == null) {
                syncBookmarksToolbar = true;
            }
            return syncBookmarksToolbar;
        });
    };
    var getSyncQueueLength = function() {
        return syncQueue.length;
    };
    var getSyncSize = function() {
        return getCachedBookmarks().then(function() {
            return platform.LocalStorage.Get(globals.CacheKeys.Bookmarks);
        }).then(function(cachedBookmarks) {
            var sizeInBytes = new TextEncoder("utf-8").encode(cachedBookmarks).byteLength;
            return sizeInBytes;
        });
    };
    var isSeparator = function(bookmark) {
        if (!bookmark) {
            return false;
        }
        var separatorRegex = new RegExp("^[-─]{1,}$");
        return bookmark.type === "separator" || bookmark.title && ((separatorRegex.test(bookmark.title) || bookmark.title.indexOf(globals.Bookmarks.HorizontalSeparatorTitle) >= 0 || bookmark.title === globals.Bookmarks.VerticalSeparatorTitle) && (!bookmark.url || bookmark.url === platform.GetNewTabUrl()) && (!bookmark.children || bookmark.children.length === 0));
    };
    var queueSync = function(syncToQueue, runSync) {
        runSync = runSync === undefined ? true : runSync;
        return $q(function(resolve, reject) {
            platform.LocalStorage.Get(globals.CacheKeys.SyncEnabled).then(function(syncEnabled) {
                if (!syncEnabled) {
                    syncQueue = [];
                }
                var queuedSync;
                if (syncToQueue) {
                    if (syncToQueue.type === globals.SyncType.Cancel) {
                        syncQueue = [];
                    }
                    queuedSync = $q.defer();
                    syncToQueue.deferred = queuedSync;
                    syncToQueue.uniqueId = syncToQueue.uniqueId || utility.GetUniqueishId();
                    syncQueue.push(syncToQueue);
                    var syncType = _.findKey(globals.SyncType, function(key) {
                        return key === syncToQueue.type;
                    });
                    utility.LogInfo("Sync " + syncToQueue.uniqueId + " (" + syncType.toLowerCase() + ") queued");
                }
                var promises = [ queuedSync.promise ];
                if (runSync) {
                    var syncedPromise = $q(function(syncedResolve, syncedReject) {
                        $timeout(function() {
                            processSyncQueue().then(syncedResolve).catch(syncedReject);
                        });
                    });
                    promises.push(syncedPromise);
                }
                return $q.all(promises).then(resolve);
            }).catch(reject);
        });
    };
    var removeExistingInXBookmarks = function(containerName, indexPath, xBookmarks) {
        var bookmark;
        var updatedBookmarks = utility.DeepCopy(xBookmarks);
        try {
            var container = getContainer(containerName, updatedBookmarks);
            if (!container) {
                throw new Error();
            }
            var parent = indexPath.slice(0, -1).reduce(function(previous, indexPathPosition) {
                return previous.children[indexPathPosition];
            }, container);
            if (!parent) {
                throw new Error();
            }
            bookmark = parent.children.splice(indexPath.slice().pop(), 1)[0];
            if (!bookmark) {
                throw new Error();
            }
        } catch (err) {
            return $q.reject({
                code: globals.ErrorCodes.XBookmarkNotFound,
                stack: err.stack
            });
        }
        return $q.resolve({
            bookmark: bookmark,
            bookmarks: updatedBookmarks
        });
    };
    var searchBookmarks = function(query) {
        if (!query) {
            query = {
                keywords: []
            };
        }
        return getCachedBookmarks().then(function(bookmarks) {
            var results;
            if (query.url) {
                results = searchBookmarksByUrl(bookmarks, query.url) || [];
            }
            bookmarks = results || bookmarks;
            results = _.chain(searchBookmarksByKeywords(bookmarks, query.keywords)).sortBy("id").sortBy("score").reverse().value();
            return results;
        });
    };
    var updateExistingInXBookmarks = function(changedBookmarkInfo, containerName, indexPath, xBookmarks) {
        var updatedBookmarks = utility.DeepCopy(xBookmarks);
        try {
            var container = getContainer(containerName, updatedBookmarks);
            if (!container) {
                throw new Error();
            }
            var parent = indexPath.slice(0, -1).reduce(function(previous, indexPathPosition) {
                return previous.children[indexPathPosition];
            }, container);
            if (!parent) {
                throw new Error();
            }
            var bookmarkToUpdate = parent.children[indexPath.slice().pop()];
            if (!bookmarkToUpdate) {
                throw new Error();
            }
            bookmarkToUpdate.title = changedBookmarkInfo.title !== undefined ? changedBookmarkInfo.title : bookmarkToUpdate.title;
            if (changedBookmarkInfo.url !== undefined && changedBookmarkInfo.url !== bookmarkToUpdate.url && (changedBookmarkInfo.url !== platform.GetNewTabUrl() || changedBookmarkInfo.url === platform.GetNewTabUrl() && bookmarkToUpdate.url === platform.GetSupportedUrl(bookmarkToUpdate.url))) {
                bookmarkToUpdate.url = changedBookmarkInfo.url;
            }
            if (isSeparator(bookmarkToUpdate)) {
                var separator = new xSeparator();
                separator.id = bookmarkToUpdate.id;
                for (var prop in bookmarkToUpdate) {
                    if (bookmarkToUpdate.hasOwnProperty(prop)) {
                        delete bookmarkToUpdate[prop];
                    }
                }
                bookmarkToUpdate.id = separator.id;
                bookmarkToUpdate.title = separator.title;
            }
            var cleanedBookmark = cleanBookmark(bookmarkToUpdate);
            parent.children[indexPath.slice().pop()] = cleanedBookmark;
        } catch (err) {
            return $q.reject({
                code: globals.ErrorCodes.XBookmarkNotFound,
                stack: err.stack
            });
        }
        return $q.resolve({
            bookmarks: updatedBookmarks
        });
    };
    var validateBookmarkIds = function(bookmarks) {
        if (!bookmarks || bookmarks.length === 0) {
            return true;
        }
        var bookmarksHaveIds = true;
        eachBookmark(bookmarks, function(bookmark) {
            if (_.isUndefined(bookmark.id)) {
                bookmarksHaveIds = false;
            }
        });
        if (!bookmarksHaveIds) {
            utility.LogWarning("Bookmarks missing ids");
            return false;
        }
        var allBookmarks = [];
        eachBookmark(bookmarks, function(bookmark) {
            allBookmarks.push(bookmark);
        });
        var invalidId = allBookmarks.find(function(bookmark) {
            return typeof bookmark.id !== "number";
        });
        if (!_.isUndefined(invalidId)) {
            utility.LogWarning("Invalid bookmark id detected: " + invalidId.id + " (" + invalidId.url + ")");
            return false;
        }
        var duplicateId = _.chain(allBookmarks).countBy("id").findKey(function(count) {
            return count > 1;
        }).value();
        if (!_.isUndefined(duplicateId)) {
            utility.LogWarning("Duplicate bookmark id detected: " + duplicateId);
            return false;
        }
        return true;
    };
    var xBookmark = function(title, url, description, tags, children) {
        var xBookmark = {};
        if (title) {
            xBookmark.title = title.trim();
        }
        if (url) {
            xBookmark.url = url.trim();
        } else {
            xBookmark.children = children || [];
        }
        if (description) {
            xBookmark.description = utility.TrimToNearestWord(description, globals.Bookmarks.DescriptionMaxLength);
        }
        if (tags && tags.length > 0) {
            xBookmark.tags = tags;
        }
        return xBookmark;
    };
    var xBookmarkIsContainer = function(bookmark) {
        return bookmark.title === globals.Bookmarks.MenuContainerName || bookmark.title === globals.Bookmarks.MobileContainerName || bookmark.title === globals.Bookmarks.OtherContainerName || bookmark.title === globals.Bookmarks.ToolbarContainerName;
    };
    var xSeparator = function() {
        return {
            title: "-"
        };
    };
    var checkIfDisableSyncOnError = function(syncEnabled, err) {
        if (syncEnabled && (err.code === globals.ErrorCodes.SyncRemoved || err.code === globals.ErrorCodes.MissingClientData || err.code === globals.ErrorCodes.NoDataFound || err.code === globals.ErrorCodes.TooManyRequests)) {
            return disableSync();
        } else {
            return $q.resolve();
        }
    };
    var cleanWords = function(wordsToClean) {
        if (!wordsToClean) {
            return;
        }
        var cleanWords = wordsToClean.toLowerCase().replace(/['"]/g, "");
        var cleanWordsArr = _.compact(cleanWords.split(/\s/));
        return cleanWordsArr;
    };
    var findBookmarkInTree = function(id, tree, index) {
        if (Array.isArray(tree)) {
            tree = {
                id: -1,
                children: tree
            };
        }
        if (tree.id === id) {
            var path = [ {
                bookmark: tree,
                index: index
            } ];
            return {
                result: tree,
                path: path
            };
        } else {
            var children = tree.children || [];
            for (var i = 0; i < children.length; i++) {
                var child = children[i];
                var tmp = findBookmarkInTree(id, child, i);
                if (!_.isEmpty(tmp)) {
                    tmp.path.unshift({
                        bookmark: tree,
                        index: index
                    });
                    return tmp;
                }
            }
            return {};
        }
    };
    var getCachedBookmarks = function() {
        return platform.LocalStorage.Get(globals.CacheKeys.Bookmarks).then(function(cachedData) {
            var cachedEncryptedBookmarks = cachedData;
            if (cachedEncryptedBookmarks && cachedBookmarks_encrypted && cachedEncryptedBookmarks === cachedBookmarks_encrypted) {
                return utility.DeepCopy(cachedBookmarks_plain);
            }
            return (cachedEncryptedBookmarks ? $q.resolve(cachedEncryptedBookmarks) : api.GetBookmarks().then(function(response) {
                return response.bookmarks;
            })).then(function(encryptedBookmarks) {
                return utility.DecryptData(encryptedBookmarks).then(function(decryptedBookmarks) {
                    var bookmarks = decryptedBookmarks ? JSON.parse(decryptedBookmarks) : [];
                    return updateCachedBookmarks(bookmarks, encryptedBookmarks);
                });
            });
        });
    };
    var handleFailedSync = function(failedSync, err) {
        platform.Interface.Refresh();
        if (err.code === globals.ErrorCodes.NetworkOffline && failedSync.type !== globals.SyncType.Pull) {
            failedSync.changeInfo = $q.resolve();
            syncQueue.unshift(failedSync);
            utility.LogInfo("Sync " + failedSync.uniqueId + " not committed: network offline (" + syncQueue.length + " queued)");
            return $q.reject({
                code: globals.ErrorCodes.SyncUncommitted
            });
        }
        utility.LogInfo("Sync " + failedSync.uniqueId + " failed");
        utility.LogError(err, "bookmarks.sync");
        if (failedSync.changeInfo) {
            failedSync.changeInfo.then(function(changeInfo) {
                if (changeInfo.type) {
                    utility.LogInfo(changeInfo);
                }
            });
        }
        return platform.LocalStorage.Get(globals.CacheKeys.SyncEnabled).then(function(syncEnabled) {
            return setIsSyncing().then(function() {
                if (!syncEnabled) {
                    return;
                }
                if (err.code === globals.ErrorCodes.NoDataFound) {
                    err.code = globals.ErrorCodes.SyncRemoved;
                } else if (failedSync.type !== globals.SyncType.Pull) {
                    syncQueue = [];
                    var lastUpdated = new Date().toISOString();
                    platform.LocalStorage.Set(globals.CacheKeys.LastUpdated, lastUpdated);
                }
                return checkIfDisableSyncOnError(syncEnabled, err);
            }).finally(function() {
                failedSync.deferred.reject(err);
            });
        });
    };
    var processBookmarkChanges = function(bookmarks, changeInfo) {
        var pathInfo;
        switch (changeInfo.type) {
          case globals.UpdateType.Create:
            var otherContainer = getContainer(globals.Bookmarks.OtherContainerName, bookmarks, true);
            var newBookmark = changeInfo.bookmark;
            newBookmark.id = getNewBookmarkId(bookmarks);
            otherContainer.children.push(newBookmark);
            pathInfo = findBookmarkInTree(newBookmark.id, bookmarks);
            break;

          case globals.UpdateType.Update:
            bookmarks = recursiveUpdate(bookmarks, changeInfo.bookmark);
            pathInfo = findBookmarkInTree(changeInfo.bookmark.id, bookmarks);
            break;

          case globals.UpdateType.Delete:
            pathInfo = findBookmarkInTree(changeInfo.id, bookmarks);
            recursiveDelete(bookmarks, changeInfo.id);
            break;
        }
        return {
            bookmarks: bookmarks,
            pathInfo: pathInfo
        };
    };
    var processSyncQueue = function(isBackgroundSync) {
        var syncEnabled, updateRemote = false;
        if (currentSync || syncQueue.length === 0) {
            return $q.resolve();
        }
        var doActionUntil = function() {
            return $q.resolve(syncQueue.length === 0);
        };
        var action = function() {
            currentSync = syncQueue.shift();
            return (currentSync.syncChange || $q.resolve(true)).then(function(syncChange) {
                if (!syncChange) {
                    return;
                }
                utility.LogInfo("Processing sync " + currentSync.uniqueId + (isBackgroundSync ? " in background" : "") + " (" + syncQueue.length + " in queue)");
                return setIsSyncing(currentSync.type).then(function() {
                    switch (currentSync.type) {
                      case globals.SyncType.Push:
                        return sync_handlePush(currentSync);

                      case globals.SyncType.Pull:
                        return sync_handlePull(currentSync);

                      case globals.SyncType.Both:
                        return sync_handleBoth(currentSync, isBackgroundSync);

                      case globals.SyncType.Cancel:
                        return sync_handleCancel(currentSync);

                      case globals.SyncType.Upgrade:
                        return sync_handleUpgrade(currentSync);

                      default:
                        return $q.reject({
                            code: globals.ErrorCodes.AmbiguousSyncRequest
                        });
                    }
                }).then(function() {
                    return platform.LocalStorage.Get(globals.CacheKeys.SyncEnabled).then(function(cachedSyncEnabled) {
                        syncEnabled = cachedSyncEnabled;
                        if (!syncEnabled && currentSync.command !== globals.Commands.RestoreBookmarks && currentSync.type !== globals.SyncType.Cancel) {
                            return enableSync().then(function() {
                                utility.LogInfo("Sync enabled");
                            });
                        }
                    }).then(function() {
                        currentSync.deferred.resolve();
                        if (currentSync.type === globals.SyncType.Cancel) {
                            updateRemote = false;
                        } else if (currentSync.type !== globals.SyncType.Pull) {
                            updateRemote = true;
                        }
                        return setIsSyncing();
                    });
                });
            }).catch(function(err) {
                if (checkIfRefreshSyncedDataOnError(err)) {
                    updateRemote = false;
                }
                return handleFailedSync(currentSync, err);
            });
        };
        return platform.LocalStorage.Get(globals.CacheKeys.SyncEnabled).then(function(cachedSyncEnabled) {
            if (cachedSyncEnabled) {
                return platform.AutomaticUpdates.Stop();
            }
        }).then(function() {
            return utility.PromiseWhile(syncQueue, doActionUntil, action);
        }).then(function() {
            if (!updateRemote) {
                return;
            }
            return platform.LocalStorage.Get(globals.CacheKeys.Bookmarks).then(function(encryptedBookmarks) {
                return utility.DecryptData(encryptedBookmarks).then(function(bookmarksJson) {
                    return api.UpdateBookmarks(encryptedBookmarks).then(function(response) {
                        return platform.LocalStorage.Set(globals.CacheKeys.LastUpdated, response.lastUpdated).then(function() {
                            utility.LogInfo("Remote bookmarks data updated at " + response.lastUpdated);
                        });
                    }).catch(function(err) {
                        if (err.code === globals.ErrorCodes.NetworkOffline) {
                            utility.LogInfo("Couldn’t update remote bookmarks data");
                            var bookmarks = JSON.parse(bookmarksJson);
                            return updateCachedBookmarks(bookmarks, encryptedBookmarks).then(function() {
                                currentSync.bookmarks = bookmarks;
                                return handleFailedSync(currentSync, err);
                            });
                        }
                        throw err;
                    });
                });
            });
        }).finally(function() {
            currentSync = null;
            return platform.LocalStorage.Get(globals.CacheKeys.SyncEnabled).then(function(cachedSyncEnabled) {
                if (cachedSyncEnabled) {
                    return platform.AutomaticUpdates.Start();
                }
            });
        });
    };
    var recursiveDelete = function(bookmarks, id) {
        return _.map(_.reject(bookmarks, function(bookmark) {
            return bookmark.id === id;
        }), function(bookmark) {
            if (bookmark.children && bookmark.children.length > 0) {
                bookmark.children = recursiveDelete(bookmark.children, id);
            }
            return bookmark;
        });
    };
    var recursiveUpdate = function(bookmarks, updatedBookmark) {
        return _.map(bookmarks, function(bookmark) {
            if (bookmark.id === updatedBookmark.id) {
                bookmark.title = updatedBookmark.title;
                bookmark.url = updatedBookmark.url;
                bookmark.description = updatedBookmark.description;
                bookmark.tags = updatedBookmark.tags;
            }
            if (bookmark.children && bookmark.children.length > 0) {
                bookmark.children = recursiveUpdate(bookmark.children, updatedBookmark);
            }
            return bookmark;
        });
    };
    var refreshLocalBookmarks = function(bookmarks) {
        return platform.Bookmarks.Clear().then(function() {
            return platform.Bookmarks.Populate(bookmarks);
        });
    };
    var removeEmptyContainers = function(bookmarks) {
        var menuContainer = getContainer(globals.Bookmarks.MenuContainerName, bookmarks);
        var mobileContainer = getContainer(globals.Bookmarks.MobileContainerName, bookmarks);
        var otherContainer = getContainer(globals.Bookmarks.OtherContainerName, bookmarks);
        var toolbarContainer = getContainer(globals.Bookmarks.ToolbarContainerName, bookmarks);
        var removeArr = [];
        if (menuContainer && (!menuContainer.children || menuContainer.children.length === 0)) {
            removeArr.push(menuContainer);
        }
        if (mobileContainer && (!mobileContainer.children || mobileContainer.children.length === 0)) {
            removeArr.push(mobileContainer);
        }
        if (otherContainer && (!otherContainer.children || otherContainer.children.length === 0)) {
            removeArr.push(otherContainer);
        }
        if (toolbarContainer && (!toolbarContainer.children || toolbarContainer.children.length === 0)) {
            removeArr.push(toolbarContainer);
        }
        return _.difference(bookmarks, removeArr);
    };
    var repairBookmarkIds = function(bookmarks) {
        var allBookmarks = [];
        var idCounter = 1;
        eachBookmark(bookmarks, function(bookmark) {
            allBookmarks.push(bookmark);
        });
        allBookmarks.forEach(function(bookmark) {
            if (typeof bookmark.id !== "number") {
                delete bookmark.id;
            }
        });
        allBookmarks = allBookmarks.sort(function(x, y) {
            return x.id - y.id;
        });
        allBookmarks.forEach(function(bookmark) {
            bookmark.id = idCounter;
            idCounter++;
        });
        return bookmarks;
    };
    var searchBookmarksByKeywords = function(bookmarksToSearch, keywords, results) {
        if (!results) {
            results = [];
        }
        _.each(bookmarksToSearch, function(bookmark) {
            if (!bookmark.url) {
                if (bookmark.children && bookmark.children.length > 0) {
                    searchBookmarksByKeywords(bookmark.children, keywords, results);
                }
            } else {
                var bookmarkWords = [];
                bookmarkWords = bookmarkWords.concat(cleanWords(bookmark.title));
                if (bookmark.description) {
                    bookmarkWords = bookmarkWords.concat(cleanWords(bookmark.description));
                }
                if (bookmark.tags) {
                    bookmarkWords = bookmarkWords.concat(cleanWords(bookmark.tags.join(" ")));
                }
                var scores = _.map(keywords, function(keyword) {
                    var count = 0;
                    _.each(bookmarkWords, function(bookmarkWord) {
                        if (bookmarkWord && bookmarkWord.toLowerCase().indexOf(keyword.toLowerCase()) === 0) {
                            count++;
                        }
                    });
                    return count;
                });
                if (_.isUndefined(_.find(scores, function(score) {
                    return score === 0;
                }))) {
                    var score = _.reduce(scores, function(memo, num) {
                        return memo + num;
                    }, 0);
                    var result = _.clone(bookmark);
                    result.score = score;
                    results.push(result);
                }
            }
        });
        return results;
    };
    var searchBookmarksByUrl = function(bookmarksToSearch, url, results) {
        if (!results) {
            results = [];
        }
        results = results.concat(_.filter(bookmarksToSearch, function(bookmark) {
            if (!bookmark.url) {
                return false;
            }
            return bookmark.url.toLowerCase().indexOf(url.toLowerCase()) >= 0;
        }));
        for (var i = 0; i < bookmarksToSearch.length; i++) {
            if (bookmarksToSearch[i].children && bookmarksToSearch[i].children.length > 0) {
                results = searchBookmarksByUrl(bookmarksToSearch[i].children, url, results);
            }
        }
        return results;
    };
    var searchBookmarksForLookaheads = function(bookmarksToSearch, word, tagsOnly, results) {
        if (!results) {
            results = [];
        }
        _.each(bookmarksToSearch, function(bookmark) {
            if (!bookmark.url) {
                results = searchBookmarksForLookaheads(bookmark.children, word, tagsOnly, results);
            } else {
                var bookmarkWords = [];
                if (!tagsOnly) {
                    if (bookmark.title) {
                        bookmarkWords = bookmarkWords.concat(_.compact(bookmark.title.replace("'", "").toLowerCase().split(/[\W_]/)));
                    }
                    if (bookmark.tags) {
                        var tags = _.chain(bookmark.tags).map(function(tag) {
                            return tag.toLowerCase().split(/\s/);
                        }).flatten().compact().value();
                        bookmarkWords = bookmarkWords.concat(tags);
                    }
                    var hostMatch = bookmark.url.toLowerCase().match(/^(https?:\/\/)?(www\.)?([^\/]+)/);
                    if (hostMatch) {
                        bookmarkWords.push(hostMatch[0]);
                        bookmarkWords.push(hostMatch[2] ? hostMatch[2] + hostMatch[3] : hostMatch[3]);
                        if (hostMatch[2]) {
                            bookmarkWords.push(hostMatch[3]);
                        }
                    }
                } else {
                    if (bookmark.tags) {
                        bookmarkWords = bookmarkWords.concat(_.compact(bookmark.tags));
                    }
                }
                bookmarkWords = _.filter(bookmarkWords, function(item) {
                    return item.length > 2;
                });
                results = results.concat(_.filter(bookmarkWords, function(bookmark) {
                    return bookmark.indexOf(word) === 0;
                }));
            }
        });
        return results;
    };
    var setIsSyncing = function(syncType) {
        if (syncType != null) {
            return platform.Interface.Refresh(null, syncType);
        }
        return platform.LocalStorage.Get(globals.CacheKeys.SyncEnabled).then(platform.Interface.Refresh);
    };
    var sync_handleBoth = function(syncData, backgroundUpdate) {
        var getBookmarksToSync, updateLocalBookmarksInfo;
        return $q.resolve(syncData.changeInfo).then(function(changeInfo) {
            if (syncData.bookmarks) {
                getBookmarksToSync = $q(function(resolve) {
                    if (validateBookmarkIds(syncData.bookmarks)) {
                        resolve(syncData.bookmarks);
                    } else {
                        var repairedBookmarks = repairBookmarkIds(syncData.bookmarks);
                        resolve(repairedBookmarks);
                    }
                });
            } else {
                updateLocalBookmarksInfo = {
                    type: changeInfo.type
                };
                if (!changeInfo) {
                    getBookmarksToSync = $q.reject({
                        code: globals.ErrorCodes.AmbiguousSyncRequest
                    });
                } else {
                    getBookmarksToSync = getCachedBookmarks().then(function(bookmarks) {
                        return processBookmarkChanges(bookmarks, changeInfo);
                    }).then(function(results) {
                        updateLocalBookmarksInfo.pathInfo = results.pathInfo;
                        return results.bookmarks;
                    });
                }
            }
            return getBookmarksToSync.then(function(bookmarks) {
                bookmarks = bookmarks || [];
                return utility.EncryptData(JSON.stringify(bookmarks)).then(function(encryptedBookmarks) {
                    return $q(function(resolve, reject) {
                        platform.EventListeners.Disable().then(function() {
                            return syncData.command === globals.Commands.RestoreBookmarks ? refreshLocalBookmarks(bookmarks) : updateLocalBookmarks(updateLocalBookmarksInfo);
                        }).then(resolve).catch(reject).finally(platform.EventListeners.Enable);
                    }).then(function() {
                        return updateCachedBookmarks(bookmarks, encryptedBookmarks);
                    });
                });
            });
        });
    };
    var sync_handleCancel = function(syncData) {
        return disableSync();
    };
    var sync_handlePull = function(syncData) {
        var bookmarks, encryptedBookmarks, lastUpdated;
        if (syncData.bookmarks) {
            return refreshLocalBookmarks(syncData.bookmarks);
        }
        return platform.LocalStorage.Get([ globals.CacheKeys.Password, globals.CacheKeys.SyncId ]).then(function(cachedData) {
            var password = cachedData[globals.CacheKeys.Password];
            var syncId = cachedData[globals.CacheKeys.SyncId];
            if (!password || !syncId) {
                return disableSync().then(function() {
                    return $q.reject({
                        code: globals.ErrorCodes.MissingClientData
                    });
                });
            }
            return api.GetBookmarks();
        }).then(function(data) {
            encryptedBookmarks = data.bookmarks;
            lastUpdated = data.lastUpdated;
            return utility.DecryptData(data.bookmarks);
        }).then(function(decryptedData) {
            bookmarks = JSON.parse(decryptedData);
            if (!validateBookmarkIds(bookmarks)) {
                bookmarks = repairBookmarkIds(bookmarks);
                return utility.EncryptData(JSON.stringify(bookmarks)).then(function(encryptedBookmarksWithNewIds) {
                    encryptedBookmarks = encryptedBookmarksWithNewIds;
                });
            }
        }).then(function() {
            return updateCachedBookmarks(bookmarks, encryptedBookmarks);
        }).then(function() {
            return platform.EventListeners.Disable().then(function() {
                return refreshLocalBookmarks(bookmarks);
            }).finally(platform.EventListeners.Enable);
        }).then(function() {
            return platform.LocalStorage.Set(globals.CacheKeys.LastUpdated, lastUpdated);
        });
    };
    var sync_handlePush = function(syncData) {
        return platform.LocalStorage.Get([ globals.CacheKeys.LastUpdated, globals.CacheKeys.Password, globals.CacheKeys.SyncEnabled, globals.CacheKeys.SyncId ]).then(function(cachedData) {
            var password = cachedData[globals.CacheKeys.Password];
            var syncEnabled = cachedData[globals.CacheKeys.SyncEnabled];
            var syncId = cachedData[globals.CacheKeys.SyncId];
            if (!password || !syncId) {
                return disableSync().then(function() {
                    return $q.reject({
                        code: globals.ErrorCodes.MissingClientData
                    });
                });
            }
            var getBookmarks;
            if (!syncData.changeInfo) {
                getBookmarks = platform.Bookmarks.Get();
            } else {
                if (!syncEnabled) {
                    return $q.resolve();
                }
                getBookmarks = getCachedBookmarks().then(function(bookmarks) {
                    return syncData.changeInfo.then(function(changeInfo) {
                        if (!changeInfo) {
                            utility.LogInfo("No change to process");
                            return bookmarks;
                        }
                        switch (changeInfo.type) {
                          case globals.UpdateType.Create:
                            return platform.Bookmarks.Created(bookmarks, changeInfo).then(function(results) {
                                return results.bookmarks;
                            });

                          case globals.UpdateType.Delete:
                            return platform.Bookmarks.Deleted(bookmarks, changeInfo).then(function(results) {
                                return results.bookmarks;
                            });

                          case globals.UpdateType.Update:
                            return platform.Bookmarks.Updated(bookmarks, changeInfo).then(function(results) {
                                return results.bookmarks;
                            });

                          case globals.UpdateType.Move:
                            return platform.Bookmarks.Moved(bookmarks, changeInfo).then(function(results) {
                                return results.bookmarks;
                            });

                          default:
                            return $q.reject({
                                code: globals.ErrorCodes.AmbiguousSyncRequest
                            });
                        }
                    });
                });
            }
            return getBookmarks;
        }).then(function(bookmarks) {
            bookmarks = bookmarks || [];
            return utility.EncryptData(JSON.stringify(bookmarks)).then(function(encryptedBookmarks) {
                return updateCachedBookmarks(bookmarks, encryptedBookmarks);
            });
        });
    };
    var sync_handleUpgrade = function(syncData) {
        var password, syncId;
        return platform.LocalStorage.Get([ globals.CacheKeys.Password, globals.CacheKeys.SyncId ]).then(function(cachedData) {
            password = cachedData[globals.CacheKeys.Password];
            syncId = cachedData[globals.CacheKeys.SyncId];
            if (!password || !syncId) {
                return disableSync().then(function() {
                    return $q.reject({
                        code: globals.ErrorCodes.MissingClientData
                    });
                });
            }
            return api.GetBookmarks();
        }).then(function(data) {
            return utility.DecryptData(data.bookmarks);
        }).then(function(decryptedData) {
            var bookmarks = decryptedData ? JSON.parse(decryptedData) : null;
            bookmarks = upgradeContainers(bookmarks || []);
            return platform.LocalStorage.Set(globals.CacheKeys.SyncVersion, globals.AppVersion).then(function() {
                return utility.GetPasswordHash(password, syncId);
            }).then(function(passwordHash) {
                return platform.LocalStorage.Set(globals.CacheKeys.Password, passwordHash);
            }).then(function() {
                return utility.EncryptData(JSON.stringify(bookmarks));
            }).then(function(encryptedBookmarks) {
                return $q.all([ api.UpdateBookmarks(encryptedBookmarks, true), platform.EventListeners.Disable().then(function() {
                    return refreshLocalBookmarks(bookmarks);
                }).finally(platform.EventListeners.Enable) ]).then(function(data) {
                    return $q.all([ updateCachedBookmarks(bookmarks, encryptedBookmarks), platform.LocalStorage.Set(globals.CacheKeys.LastUpdated, data[0].lastUpdated) ]);
                });
            });
        });
    };
    var updateCachedBookmarks = function(unencryptedBookmarks, encryptedBookmarks) {
        if (encryptedBookmarks !== undefined) {
            return platform.LocalStorage.Set(globals.CacheKeys.Bookmarks, encryptedBookmarks).then(function() {
                cachedBookmarks_encrypted = encryptedBookmarks;
                if (unencryptedBookmarks !== undefined) {
                    cachedBookmarks_plain = unencryptedBookmarks;
                }
                return unencryptedBookmarks;
            });
        }
        return $q.resolve(unencryptedBookmarks);
    };
    var updateLocalBookmarks = function(updateInfo) {
        return (!updateInfo || !updateInfo.pathInfo ? $q.resolve(false) : updateInfo.pathInfo.path[1].bookmark.title === globals.Bookmarks.ToolbarContainerName ? getSyncBookmarksToolbar() : $q.resolve(true)).then(function(doLocalUpdate) {
            if (!doLocalUpdate) {
                return;
            }
            switch (updateInfo.type) {
              case globals.UpdateType.Create:
                return platform.Bookmarks.CreateSingle(updateInfo.pathInfo.result, updateInfo.pathInfo.path);

              case globals.UpdateType.Update:
                return platform.Bookmarks.UpdateSingle(updateInfo.pathInfo.result, updateInfo.pathInfo.path);

              case globals.UpdateType.Delete:
                return platform.Bookmarks.DeleteSingle(updateInfo.pathInfo.path);

              case !updateInfo:
              default:
                return $q.reject({
                    code: globals.ErrorCodes.AmbiguousSyncRequest
                });
            }
        });
    };
    var upgradeContainers = function(bookmarks) {
        var otherContainer = getContainer(globals.Bookmarks.OtherContainerNameOld, bookmarks);
        if (otherContainer) {
            otherContainer.title = globals.Bookmarks.OtherContainerName;
        }
        var toolbarContainer = getContainer(globals.Bookmarks.ToolbarContainerNameOld, bookmarks);
        if (toolbarContainer) {
            toolbarContainer.title = globals.Bookmarks.ToolbarContainerName;
        }
        var xbsContainerIndex = _.findIndex(bookmarks, function(x) {
            return x.title === globals.Bookmarks.UnfiledContainerNameOld;
        });
        if (xbsContainerIndex >= 0) {
            var xbsContainer = bookmarks.splice(xbsContainerIndex, 1)[0];
            xbsContainer.title = "Legacy xBrowserSync bookmarks";
            otherContainer.children = otherContainer.children || [];
            otherContainer.children.splice(0, 0, xbsContainer);
        }
        return bookmarks;
    };
    return {
        AddNewInXBookmarks: addNewInXBookmarks,
        CheckIfRefreshSyncedDataOnError: checkIfRefreshSyncedDataOnError,
        CheckForUpdates: checkForUpdates,
        CleanBookmark: cleanBookmark,
        ConvertLocalBookmarkToXBookmark: convertLocalBookmarkToXBookmark,
        DisableSync: disableSync,
        Each: eachBookmark,
        EnableSync: enableSync,
        Export: exportBookmarks,
        FindBookmarkById: findBookmarkById,
        FindCurrentUrlInBookmarks: findCurrentUrlInBookmarks,
        GetBookmarks: getCachedBookmarks,
        GetBookmarkTitleForDisplay: getBookmarkTitleForDisplay,
        GetContainer: getContainer,
        GetCurrentSync: getCurrentSync,
        GetExistingInXBookmarks: getExistingInXBookmarks,
        GetLookahead: getLookahead,
        GetNewBookmarkId: getNewBookmarkId,
        GetSyncBookmarksToolbar: getSyncBookmarksToolbar,
        GetSyncQueueLength: getSyncQueueLength,
        IsSeparator: isSeparator,
        QueueSync: queueSync,
        RemoveExistingInXBookmarks: removeExistingInXBookmarks,
        Search: searchBookmarks,
        Sync: executeSync,
        SyncSize: getSyncSize,
        UpdateExistingInXBookmarks: updateExistingInXBookmarks,
        UpgradeContainers: upgradeContainers,
        ValidateBookmarkIds: validateBookmarkIds,
        XBookmark: xBookmark,
        XBookmarkIsContainer: xBookmarkIsContainer,
        XSeparator: xSeparator
    };
};

var xBrowserSync = xBrowserSync || {};

xBrowserSync.App = xBrowserSync.App || {};

xBrowserSync.App.Platform = function() {
    "use strict";
    var notImplemented = function() {
        function NotImplementedException() {
            this.name = "NotImplementedException";
            this.code = 10800;
        }
        throw new NotImplementedException();
    };
    return {
        AutomaticUpdates: {
            NextUpdate: notImplemented,
            Start: notImplemented,
            Stop: notImplemented
        },
        Bookmarks: {
            Clear: notImplemented,
            Created: notImplemented,
            CreateSingle: notImplemented,
            Deleted: notImplemented,
            DeleteSingle: notImplemented,
            Get: notImplemented,
            Moved: notImplemented,
            Populate: notImplemented,
            Share: notImplemented,
            Updated: notImplemented,
            UpdateSingle: notImplemented
        },
        CopyToClipboard: notImplemented,
        DownloadFile: notImplemented,
        EventListeners: {
            Enable: notImplemented,
            Disable: notImplemented
        },
        GetConstant: notImplemented,
        GetCurrentUrl: notImplemented,
        GetHelpPages: notImplemented,
        GetNewTabUrl: notImplemented,
        GetPageMetadata: notImplemented,
        GetSupportedUrl: notImplemented,
        Init: notImplemented,
        Interface: {
            Working: {
                Hide: notImplemented,
                Show: notImplemented
            },
            Refresh: notImplemented
        },
        LocalStorage: {
            Get: notImplemented,
            Set: notImplemented
        },
        OpenUrl: notImplemented,
        Permissions: {
            Check: notImplemented,
            Remove: notImplemented,
            Request: notImplemented
        },
        Scanner: {
            Start: notImplemented,
            Stop: notImplemented,
            ToggleLight: notImplemented
        },
        SelectFile: notImplemented,
        Sync: {
            Current: notImplemented,
            Disable: notImplemented,
            GetQueueLength: notImplemented,
            Queue: notImplemented
        }
    };
};

var xBrowserSync = xBrowserSync || {};

xBrowserSync.App = xBrowserSync.App || {};

xBrowserSync.App.PlatformImplementation = function($interval, $q, $timeout, platform, globals, utility, bookmarks) {
    "use strict";
    var vm, loadingId, refreshInterfaceTimeout, contentScriptUrl = "js/getPageMetadata.js", optionalPermissions = {
        origins: [ "http://*/", "https://*/" ]
    }, unsupportedContainers = [ globals.Bookmarks.MenuContainerName, globals.Bookmarks.MobileContainerName ];
    var ChromeImplementation = function() {
        platform.AutomaticUpdates.NextUpdate = getAutoUpdatesNextRun;
        platform.AutomaticUpdates.Start = startAutoUpdates;
        platform.AutomaticUpdates.Stop = stopAutoUpdates;
        platform.Bookmarks.Clear = clearBookmarks;
        platform.Bookmarks.Created = bookmarksCreated;
        platform.Bookmarks.CreateSingle = createSingle;
        platform.Bookmarks.Deleted = bookmarksDeleted;
        platform.Bookmarks.DeleteSingle = deleteSingle;
        platform.Bookmarks.Get = getBookmarks;
        platform.Bookmarks.GetLocalBookmarkLocationInfo = getLocalBookmarkLocationInfo;
        platform.Bookmarks.LocalBookmarkInToolbar = localBookmarkInToolbar;
        platform.Bookmarks.Moved = bookmarksMoved;
        platform.Bookmarks.Populate = populateBookmarks;
        platform.Bookmarks.ShouldSyncLocalChanges = shouldSyncLocalChanges;
        platform.Bookmarks.Updated = bookmarksUpdated;
        platform.Bookmarks.UpdateSingle = updateSingle;
        platform.CopyToClipboard = copyToClipboard;
        platform.DownloadFile = downloadFile;
        platform.EventListeners.Enable = enableEventListeners;
        platform.EventListeners.Disable = disableEventListeners;
        platform.GetConstant = getConstant;
        platform.GetCurrentUrl = getCurrentUrl;
        platform.GetHelpPages = getHelpPages;
        platform.GetNewTabUrl = getNewTabUrl;
        platform.GetPageMetadata = getPageMetadata;
        platform.GetSupportedUrl = getSupportedUrl;
        platform.Init = init;
        platform.Interface.Working.Hide = hideLoading;
        platform.Interface.Working.Show = displayLoading;
        platform.Interface.Refresh = refreshInterface;
        platform.LocalStorage.Get = getFromLocalStorage;
        platform.LocalStorage.Set = setInLocalStorage;
        platform.OpenUrl = openUrl;
        platform.Permissions.Check = checkPermissions;
        platform.Permissions.Remove = removePermissions;
        platform.Permissions.Request = requestPermissions;
        platform.Sync.Current = getCurrentSync;
        platform.Sync.Disable = disableSync;
        platform.Sync.GetQueueLength = getSyncQueueLength;
        platform.Sync.Queue = queueSync;
    };
    var bookmarksCreated = function(xBookmarks, changeInfo) {
        delete changeInfo.bookmark.id;
        return bookmarks.AddNewInXBookmarks(changeInfo.bookmark, changeInfo.container, changeInfo.indexPath, xBookmarks);
    };
    var bookmarksDeleted = function(xBookmarks, changeInfo) {
        return bookmarks.RemoveExistingInXBookmarks(changeInfo.container, changeInfo.indexPath, xBookmarks);
    };
    var bookmarksMoved = function(xBookmarks, changeInfo) {
        if (!changeInfo.syncChange && !changeInfo.targetInfo.syncChange) {
            return $q.resolve({
                bookmarks: null
            });
        }
        return (changeInfo.syncChange ? bookmarks.RemoveExistingInXBookmarks(changeInfo.container, changeInfo.indexPath, xBookmarks) : $q(function(resolve) {
            var convertedBookmark = bookmarks.ConvertLocalBookmarkToXBookmark(changeInfo.bookmark, xBookmarks);
            resolve({
                bookmark: convertedBookmark,
                bookmarks: xBookmarks
            });
        })).then(function(results) {
            if (!changeInfo.syncChange && changeInfo.targetInfo.syncChange) {
                delete results.bookmark.id;
            }
            return changeInfo.targetInfo.syncChange ? bookmarks.AddNewInXBookmarks(results.bookmark, changeInfo.targetInfo.container, changeInfo.targetInfo.indexPath, results.bookmarks) : $q.resolve(results);
        });
    };
    var bookmarksUpdated = function(xBookmarks, changeInfo) {
        return bookmarks.UpdateExistingInXBookmarks(changeInfo.bookmark, changeInfo.container, changeInfo.indexPath, xBookmarks);
    };
    var clearBookmarks = function() {
        return getLocalContainerIds().then(function(localContainerIds) {
            var otherBookmarksId = localContainerIds[globals.Bookmarks.OtherContainerName];
            var toolbarBookmarksId = localContainerIds[globals.Bookmarks.ToolbarContainerName];
            var clearOthers = $q(function(resolve, reject) {
                chrome.bookmarks.getChildren(otherBookmarksId, function(results) {
                    var apiError = checkForApiError();
                    if (apiError) {
                        return reject(apiError);
                    }
                    $q.all(results.map(function(child) {
                        return deleteLocalBookmarksTree(child.id);
                    })).then(resolve).catch(reject);
                });
            }).catch(function(err) {
                utility.LogWarning("Error clearing other bookmarks");
                throw err;
            });
            var clearToolbar = bookmarks.GetSyncBookmarksToolbar().then(function(syncBookmarksToolbar) {
                if (!syncBookmarksToolbar) {
                    utility.LogInfo("Not clearing toolbar");
                    return;
                }
                return $q(function(resolve, reject) {
                    chrome.bookmarks.getChildren(toolbarBookmarksId, function(results) {
                        var apiError = checkForApiError();
                        if (apiError) {
                            return reject(apiError);
                        }
                        $q.all(results.map(function(child) {
                            return deleteLocalBookmarksTree(child.id);
                        })).then(resolve).catch(reject);
                    });
                });
            }).catch(function(err) {
                utility.LogWarning("Error clearing bookmarks toolbar");
                throw err;
            });
            return $q.all([ clearOthers, clearToolbar ]);
        }).catch(function(err) {
            return $q.reject({
                code: globals.ErrorCodes.FailedRemoveLocalBookmarks,
                stack: err.stack
            });
        });
    };
    var checkPermissions = function() {
        return $q(function(resolve, reject) {
            chrome.permissions.contains(optionalPermissions, function(hasPermissions) {
                var apiError = checkForApiError();
                if (apiError) {
                    return reject(apiError);
                }
                resolve(hasPermissions);
            });
        });
    };
    var copyToClipboard = function(textToCopy) {
        return navigator.clipboard.writeText(textToCopy).catch(function(err) {
            utility.LogError(err, "platform.copyToClipboard");
            throw err;
        });
    };
    var createSingle = function(bookmarkToCreate, pathToTarget) {
        return findLocalBookmarkByPath(pathToTarget.slice(1, pathToTarget.length - 1)).then(function(parentLocalBookmark) {
            return createLocalBookmark(parentLocalBookmark.id, bookmarkToCreate.title, bookmarkToCreate.url);
        });
    };
    var deleteSingle = function(pathToTarget) {
        return findLocalBookmarkByPath(pathToTarget.slice(1)).then(function(bookmarkToDelete) {
            if (!bookmarkToDelete) {
                return $q.reject({
                    code: globals.ErrorCodes.LocalBookmarkNotFound
                });
            }
            return deleteLocalBookmarksTree(bookmarkToDelete.id);
        });
    };
    var disableEventListeners = function() {
        return sendMessage({
            command: globals.Commands.DisableEventListeners
        });
    };
    var disableSync = function() {
        return sendMessage({
            command: globals.Commands.DisableSync
        });
    };
    var displayLoading = function(id) {
        var timeout;
        if (loadingId) {
            return;
        }
        vm.alert.show = false;
        switch (id) {
          case "checkingNewServiceUrl":
            timeout = $timeout(function() {
                vm.working.show = true;
            }, 100);
            break;

          case "retrievingMetadata":
            timeout = $timeout(function() {
                vm.working.show = true;
            }, 500);
            break;

          default:
            timeout = $timeout(function() {
                vm.working.show = true;
            });
            break;
        }
        loadingId = id;
        return timeout;
    };
    var downloadFile = function(fileName, textContents, linkId) {
        if (!fileName) {
            throw new Error("File name not supplied.");
        }
        var downloadLink;
        if (linkId) {
            downloadLink = document.getElementById(linkId);
        } else {
            downloadLink = document.createElement("a");
            downloadLink.style.display = "none";
            document.body.appendChild(downloadLink);
        }
        if (!downloadLink) {
            throw new Error("Link element not found.");
        }
        utility.LogInfo("Downloading file " + fileName);
        var file = new Blob([ textContents ], {
            type: "text/plain"
        });
        downloadLink.href = URL.createObjectURL(file);
        downloadLink.innerText = fileName;
        downloadLink.download = fileName;
        downloadLink.click();
        if (!linkId) {
            document.body.removeChild(downloadLink);
        }
        var message = getConstant(globals.Constants.DownloadFile_Success_Message);
        return $q.resolve(message);
    };
    var enableEventListeners = function() {
        return sendMessage({
            command: globals.Commands.EnableEventListeners
        });
    };
    var getAutoUpdatesNextRun = function() {
        return $q(function(resolve, reject) {
            chrome.alarms.get(globals.Alarm.Name, function(alarm) {
                if (!alarm) {
                    return resolve();
                }
                resolve(utility.Get24hrTimeFromDate(new Date(alarm.scheduledTime)));
            });
        });
    };
    var getBookmarks = function(addBookmarkIds) {
        addBookmarkIds = addBookmarkIds || true;
        var allLocalBookmarks = [];
        return getLocalContainerIds().then(function(localContainerIds) {
            var menuBookmarksId = localContainerIds[globals.Bookmarks.MenuContainerName];
            var mobileBookmarksId = localContainerIds[globals.Bookmarks.MobileContainerName];
            var otherBookmarksId = localContainerIds[globals.Bookmarks.OtherContainerName];
            var toolbarBookmarksId = localContainerIds[globals.Bookmarks.ToolbarContainerName];
            var getOtherBookmarks = otherBookmarksId == null ? $q.resolve() : getLocalBookmarkTree(otherBookmarksId).then(function(otherBookmarks) {
                if (!otherBookmarks.children || otherBookmarks.children.length === 0) {
                    return;
                }
                bookmarks.Each(otherBookmarks.children, function(bookmark) {
                    allLocalBookmarks.push(bookmark);
                });
                var xBookmarks = getLocalBookmarksAsXBookmarks(otherBookmarks.children);
                var xBookmarksWithoutContainers = xBookmarks.filter(function(x) {
                    return !unsupportedContainers.find(function(y) {
                        return y === x.title;
                    });
                });
                return xBookmarksWithoutContainers;
            });
            var getToolbarBookmarks = toolbarBookmarksId == null ? $q.resolve() : $q.all([ bookmarks.GetSyncBookmarksToolbar(), getLocalBookmarkTree(toolbarBookmarksId) ]).then(function(results) {
                var syncBookmarksToolbar = results[0];
                var toolbarBookmarks = results[1];
                if (!syncBookmarksToolbar) {
                    return;
                }
                if (toolbarBookmarks.children && toolbarBookmarks.children.length > 0) {
                    bookmarks.Each(toolbarBookmarks.children, function(bookmark) {
                        allLocalBookmarks.push(bookmark);
                    });
                    return getLocalBookmarksAsXBookmarks(toolbarBookmarks.children);
                }
            });
            var getMenuBookmarks = menuBookmarksId == null ? $q.resolve() : getLocalBookmarkTree(menuBookmarksId).then(function(menuBookmarks) {
                if (menuBookmarks.children && menuBookmarks.children.length > 0) {
                    return getLocalBookmarksAsXBookmarks(menuBookmarks.children);
                }
            });
            var getMobileBookmarks = mobileBookmarksId == null ? $q.resolve() : getLocalBookmarkTree(mobileBookmarksId).then(function(mobileBookmarks) {
                if (mobileBookmarks.children && mobileBookmarks.children.length > 0) {
                    return getLocalBookmarksAsXBookmarks(mobileBookmarks.children);
                }
            });
            return $q.all([ getOtherBookmarks, getToolbarBookmarks, getMenuBookmarks, getMobileBookmarks ]);
        }).then(function(results) {
            var otherBookmarks = results[0];
            var toolbarBookmarks = results[1];
            var menuBookmarks = results[2];
            var mobileBookmarks = results[3];
            var xBookmarks = [];
            var otherContainer, toolbarContainer, menuContainer, mobileContainer;
            if (otherBookmarks && otherBookmarks.length > 0) {
                otherContainer = bookmarks.GetContainer(globals.Bookmarks.OtherContainerName, xBookmarks, true);
                otherContainer.children = otherBookmarks;
            }
            if (toolbarBookmarks && toolbarBookmarks.length > 0) {
                toolbarContainer = bookmarks.GetContainer(globals.Bookmarks.ToolbarContainerName, xBookmarks, true);
                toolbarContainer.children = toolbarBookmarks;
            }
            if (menuBookmarks && menuBookmarks.length > 0) {
                menuContainer = bookmarks.GetContainer(globals.Bookmarks.MenuContainerName, xBookmarks, true);
                menuContainer.children = menuBookmarks;
            }
            if (mobileBookmarks && mobileBookmarks.length > 0) {
                mobileContainer = bookmarks.GetContainer(globals.Bookmarks.MobileContainerName, xBookmarks, true);
                mobileContainer.children = mobileBookmarks;
            }
            [ otherContainer, toolbarContainer, menuContainer, mobileContainer ].forEach(function(container) {
                if (!container) {
                    return;
                }
                allLocalBookmarks = allLocalBookmarks.filter(function(bookmark) {
                    return bookmark.title !== container.title;
                });
            });
            allLocalBookmarks = allLocalBookmarks.sort(function(x, y) {
                return x.dateAdded - y.dateAdded;
            });
            allLocalBookmarks.forEach(function(localBookmark) {
                bookmarks.Each(xBookmarks, function(xBookmark) {
                    if (!xBookmark.id && (!localBookmark.url && xBookmark.title === localBookmark.title || localBookmark.url && xBookmark.url === localBookmark.url)) {
                        xBookmark.id = bookmarks.GetNewBookmarkId(xBookmarks);
                    }
                });
            });
            bookmarks.Each(xBookmarks, function(xBookmark) {
                if (!xBookmark.id) {
                    xBookmark.id = bookmarks.GetNewBookmarkId(xBookmarks);
                }
            });
            return xBookmarks;
        });
    };
    var getConstant = function(constName) {
        return chrome.i18n.getMessage(constName);
    };
    var getCurrentSync = function() {
        return sendMessage({
            command: globals.Commands.GetCurrentSync
        }).then(function(response) {
            return response.currentSync;
        });
    };
    var getCurrentUrl = function() {
        return $q(function(resolve, reject) {
            chrome.tabs.query({
                currentWindow: true,
                active: true
            }, function(tabs) {
                var apiError = checkForApiError();
                if (apiError) {
                    return reject(apiError);
                }
                resolve(tabs[0].url);
            });
        });
    };
    var getHelpPages = function() {
        var pages = [ platform.GetConstant(globals.Constants.Help_Page_Welcome_Desktop_Content), platform.GetConstant(globals.Constants.Help_Page_BeforeYouBegin_Chrome_Content), platform.GetConstant(globals.Constants.Help_Page_FirstSync_Desktop_Content), platform.GetConstant(globals.Constants.Help_Page_Service_Content), platform.GetConstant(globals.Constants.Help_Page_SyncId_Content), platform.GetConstant(globals.Constants.Help_Page_ExistingId_Desktop_Content), platform.GetConstant(globals.Constants.Help_Page_Searching_Desktop_Content), platform.GetConstant(globals.Constants.Help_Page_AddingBookmarks_Chrome_Content), platform.GetConstant(globals.Constants.Help_Page_NativeFeatures_Chrome_Content), platform.GetConstant(globals.Constants.Help_Page_BackingUp_Desktop_Content), platform.GetConstant(globals.Constants.Help_Page_Shortcuts_Chrome_Content), platform.GetConstant(globals.Constants.Help_Page_Mobile_Content), platform.GetConstant(globals.Constants.Help_Page_FurtherSupport_Content) ];
        return pages;
    };
    var getFromLocalStorage = function(storageKeys) {
        return $q(function(resolve, reject) {
            chrome.storage.local.get(storageKeys, function(storageItems) {
                var apiError = checkForApiError();
                if (apiError) {
                    return reject(apiError);
                }
                if (storageKeys == null || Array.isArray(storageKeys)) {
                    resolve(storageItems);
                } else {
                    resolve(storageItems[storageKeys]);
                }
            });
        });
    };
    var getLocalBookmarkLocationInfo = function(localBookmarkId, initialIndexPath) {
        var indexPath = initialIndexPath || [];
        var localBookmarkTree, containerId, containerName;
        var doActionUntil = function(id) {
            return isLocalBookmarkContainer(id).then(function(localContainer) {
                if (localContainer) {
                    containerId = id;
                    containerName = localContainer.xBookmarkTitle;
                }
                return !!localContainer;
            });
        };
        var action = function(id) {
            return $q(function(resolve, reject) {
                var localBookmark = bookmarks.FindBookmarkById(localBookmarkTree.children, id);
                if (!localBookmark) {
                    return reject({
                        code: globals.ErrorCodes.LocalBookmarkNotFound
                    });
                }
                indexPath.unshift(localBookmark.index);
                resolve(localBookmark.parentId);
            });
        };
        return getLocalBookmarkTree().then(function(tree) {
            var localBookmark = bookmarks.FindBookmarkById(tree.children, localBookmarkId);
            if (!localBookmark) {
                return $q.reject({
                    code: globals.ErrorCodes.LocalBookmarkNotFound
                });
            }
            localBookmarkTree = tree;
            return utility.PromiseWhile(localBookmarkId, doActionUntil, action).then(function() {
                return getNumContainersBeforeBookmarkIndex(containerId, indexPath[0]).then(function(numContainers) {
                    return [ indexPath[0] - numContainers ].concat(indexPath.slice(1));
                });
            }).then(function(adjustedIndexPath) {
                return {
                    container: containerName,
                    indexPath: adjustedIndexPath
                };
            });
        });
    };
    var getNewTabUrl = function() {
        return "chrome://newtab/";
    };
    var getPageMetadata = function(getFullMetadata, pageUrl) {
        var activeTab;
        getFullMetadata = getFullMetadata === undefined ? true : getFullMetadata;
        return $q(function(resolve, reject) {
            chrome.tabs.query({
                active: true,
                currentWindow: true
            }, function(tabs) {
                var apiError = checkForApiError();
                if (apiError) {
                    return reject(apiError);
                }
                resolve(tabs);
            });
        }).then(function(tabs) {
            activeTab = tabs && tabs[0];
            if (!activeTab) {
                return $q.reject({
                    code: globals.ErrorCodes.FailedGetPageMetadata
                });
            }
            var metadata = activeTab && {
                title: activeTab.title,
                url: activeTab.url
            };
            if (getFullMetadata) {
                getFullMetadata = !/chrome\:\/\//i.test(activeTab.url);
            }
            return $q(function(resolve) {
                if (!getFullMetadata) {
                    return resolve(metadata);
                }
                chrome.tabs.executeScript(activeTab.id, {
                    file: contentScriptUrl
                }, function(response) {
                    var apiError = checkForApiError();
                    if (apiError) {
                        utility.LogWarning("Unable to get metadata.");
                        return resolve(metadata);
                    }
                    if (!response) {
                        return resolve(metadata);
                    }
                    metadata = response[0];
                    metadata.title = metadata.title || activeTab.title;
                    metadata.url = metadata.url || activeTab.url;
                    resolve(metadata);
                });
            });
        });
    };
    var getSyncQueueLength = function() {
        return sendMessage({
            command: globals.Commands.GetSyncQueueLength
        }).then(function(response) {
            return response.syncQueueLength;
        });
    };
    var getSupportedUrl = function(url) {
        return localBookmarkUrlIsSupported(url) ? url : getNewTabUrl();
    };
    var hideLoading = function(id, timeout) {
        if (timeout) {
            $timeout.cancel(timeout);
        }
        vm.alert.show = false;
        if (!loadingId || id === loadingId) {
            vm.working.show = false;
            loadingId = null;
        }
    };
    var init = function(viewModel) {
        vm = viewModel;
        vm.platformName = globals.Platforms.Chrome;
        return $q.resolve();
    };
    var localBookmarkInToolbar = function(localBookmark) {
        return getLocalContainerIds().then(function(localContainerIds) {
            return localBookmark.parentId === localContainerIds[globals.Bookmarks.ToolbarContainerName];
        });
    };
    var openUrl = function(url) {
        if (!localBookmarkUrlIsSupported(url)) {
            utility.LogInfo("Attempted to navigate to unsupported url: " + url);
            url = getNewTabUrl();
        }
        var openInNewTab = function() {
            chrome.tabs.create({
                url: url
            });
        };
        chrome.tabs.query({
            currentWindow: true,
            active: true
        }, function(tabs) {
            var apiError = checkForApiError();
            if (apiError) {
                return reject(apiError);
            }
            if (tabs && tabs.length > 0 && tabs[0].url && tabs[0].url.startsWith(getNewTabUrl())) {
                chrome.tabs.update(tabs[0].id, {
                    url: url
                }, function() {
                    window.close();
                });
            } else {
                openInNewTab();
            }
        });
    };
    var populateBookmarks = function(xBookmarks) {
        var populateStartTime = new Date();
        var menuContainer = bookmarks.GetContainer(globals.Bookmarks.MenuContainerName, xBookmarks);
        var mobileContainer = bookmarks.GetContainer(globals.Bookmarks.MobileContainerName, xBookmarks);
        var otherContainer = bookmarks.GetContainer(globals.Bookmarks.OtherContainerName, xBookmarks);
        var toolbarContainer = bookmarks.GetContainer(globals.Bookmarks.ToolbarContainerName, xBookmarks);
        return getLocalContainerIds().then(function(localContainerIds) {
            var otherBookmarksId = localContainerIds[globals.Bookmarks.OtherContainerName];
            var toolbarBookmarksId = localContainerIds[globals.Bookmarks.ToolbarContainerName];
            var populateMenu = $q(function(resolve, reject) {
                if (menuContainer) {
                    chrome.bookmarks.getSubTree(otherBookmarksId, function(results) {
                        var apiError = checkForApiError();
                        if (apiError) {
                            utility.LogWarning("Error populating bookmarks menu.");
                            return reject(apiError);
                        }
                        createLocalBookmarksFromXBookmarks(otherBookmarksId, [ menuContainer ], toolbarBookmarksId).then(resolve).catch(reject);
                    });
                } else {
                    resolve();
                }
            });
            var populateMobile = $q(function(resolve, reject) {
                if (mobileContainer) {
                    chrome.bookmarks.getSubTree(otherBookmarksId, function(results) {
                        var apiError = checkForApiError();
                        if (apiError) {
                            utility.LogWarning("Error populating mobile bookmarks.");
                            return reject(apiError);
                        }
                        createLocalBookmarksFromXBookmarks(otherBookmarksId, [ mobileContainer ], toolbarBookmarksId).then(resolve).catch(reject);
                    });
                } else {
                    resolve();
                }
            });
            var populateOther = $q(function(resolve, reject) {
                if (otherContainer) {
                    chrome.bookmarks.getSubTree(otherBookmarksId, function(results) {
                        var apiError = checkForApiError();
                        if (apiError) {
                            utility.LogWarning("Error populating other bookmarks.");
                            return reject(apiError);
                        }
                        createLocalBookmarksFromXBookmarks(otherBookmarksId, otherContainer.children, toolbarBookmarksId).then(resolve).catch(reject);
                    });
                } else {
                    resolve();
                }
            });
            var populateToolbar = bookmarks.GetSyncBookmarksToolbar().then(function(syncBookmarksToolbar) {
                if (!syncBookmarksToolbar) {
                    utility.LogInfo("Not populating toolbar");
                    return;
                }
                if (toolbarContainer) {
                    return $q(function(resolve, reject) {
                        chrome.bookmarks.getSubTree(toolbarBookmarksId, function(results) {
                            var apiError = checkForApiError();
                            if (apiError) {
                                utility.LogWarning("Error populating bookmarks toolbar.");
                                return reject(apiError);
                            }
                            createLocalBookmarksFromXBookmarks(toolbarBookmarksId, toolbarContainer.children, toolbarBookmarksId).then(resolve).catch(reject);
                        });
                    });
                }
            });
            return $q.all([ populateMenu, populateMobile, populateOther, populateToolbar ]);
        }).then(function() {
            var populateEndTime = new Date();
            utility.LogInfo("Local population completed in " + (populateEndTime - populateStartTime) / 1e3 + "s");
            return reorderLocalContainers();
        });
    };
    var queueSync = function(syncData, command) {
        syncData.command = command || globals.Commands.SyncBookmarks;
        return sendMessage(syncData).then(function(response) {
            return response.bookmarks;
        });
    };
    var refreshInterface = function(syncEnabled, syncType) {
        var iconPath, newTitle = getConstant(globals.Constants.Title);
        var syncingTitle = " (" + getConstant(globals.Constants.Tooltip_Syncing_Label) + ")";
        var syncedTitle = " (" + getConstant(globals.Constants.Tooltip_Synced_Label) + ")";
        var notSyncedTitle = " (" + getConstant(globals.Constants.Tooltip_NotSynced_Label) + ")";
        if (refreshInterfaceTimeout) {
            $timeout.cancel(refreshInterfaceTimeout);
            refreshInterfaceTimeout = null;
        }
        if (syncType) {
            iconPath = syncType === globals.SyncType.Pull ? "img/downloading.png" : "img/uploading.png";
            newTitle += syncingTitle;
        } else if (syncEnabled) {
            iconPath = "img/synced.png";
            newTitle += syncedTitle;
        } else {
            iconPath = "img/notsynced.png";
            newTitle += notSyncedTitle;
        }
        return $q(function(resolve, reject) {
            var iconUpdated = $q.defer();
            var titleUpdated = $q.defer();
            chrome.browserAction.getTitle({}, function(currentTitle) {
                if (newTitle === currentTitle) {
                    return resolve();
                }
                if (currentTitle.indexOf(syncingTitle) > 0 && newTitle.indexOf(syncedTitle)) {
                    refreshInterfaceTimeout = $timeout(function() {
                        chrome.browserAction.setIcon({
                            path: iconPath
                        });
                        chrome.browserAction.setTitle({
                            title: newTitle
                        });
                    }, 350);
                    iconUpdated.resolve();
                    titleUpdated.resolve();
                } else {
                    chrome.browserAction.setIcon({
                        path: iconPath
                    }, iconUpdated.resolve);
                    chrome.browserAction.setTitle({
                        title: newTitle
                    }, titleUpdated.resolve);
                }
                $q.all([ iconUpdated, titleUpdated ]).then(resolve).catch(reject);
            });
        });
    };
    var removePermissions = function() {
        return $q(function(resolve, reject) {
            chrome.permissions.remove(optionalPermissions, function(removed) {
                var apiError = checkForApiError();
                if (apiError) {
                    return reject(apiError);
                }
                if (!removed) {
                    return reject(new Error("Permissions not removed"));
                }
                utility.LogInfo("Optional permissions removed");
                resolve();
            });
        });
    };
    var requestPermissions = function() {
        return $q(function(resolve, reject) {
            chrome.permissions.request(optionalPermissions, function(granted) {
                var apiError = checkForApiError();
                if (apiError) {
                    return reject(apiError);
                }
                utility.LogInfo("Optional permissions " + (!granted ? "not " : "") + "granted");
                resolve(granted);
            });
        });
    };
    var setInLocalStorage = function(storageKey, value) {
        return $q(function(resolve, reject) {
            try {
                if (value != null) {
                    var storageObj = {};
                    storageObj[storageKey] = value;
                    chrome.storage.local.set(storageObj, function() {
                        resolve();
                    });
                } else {
                    chrome.storage.local.remove(storageKey, function() {
                        var apiError = checkForApiError();
                        if (apiError) {
                            return reject(apiError);
                        }
                        resolve();
                    });
                }
            } catch (err) {
                reject(err);
            }
        });
    };
    var shouldSyncLocalChanges = function(changeInfo, xBookmarks) {
        return wasContainerChanged(changeInfo.bookmark, xBookmarks).then(function(changedBookmarkIsContainer) {
            if (changedBookmarkIsContainer) {
                return $q.reject({
                    code: globals.ErrorCodes.ContainerChanged
                });
            }
            return changeInfo.container === globals.Bookmarks.ToolbarContainerName ? bookmarks.GetSyncBookmarksToolbar() : $q.resolve(true);
        }).then(function(syncBookmarksToolbar) {
            if (!syncBookmarksToolbar) {
                utility.LogInfo("Not syncing toolbar");
                return false;
            }
            return true;
        });
    };
    var startAutoUpdates = function() {
        return $q(function(resolve, reject) {
            chrome.alarms.clear(globals.Alarm.Name, function() {
                var apiError = checkForApiError();
                if (apiError) {
                    apiError.code = globals.ErrorCodes.FailedRegisterAutoUpdates;
                    return reject(apiError);
                }
                chrome.alarms.create(globals.Alarm.Name, {
                    periodInMinutes: globals.Alarm.Period
                });
                resolve();
            });
        });
    };
    var stopAutoUpdates = function() {
        chrome.alarms.clear(globals.Alarm.Name);
    };
    var updateSingle = function(updatedBookmark, pathToTarget) {
        return findLocalBookmarkByPath(pathToTarget.slice(1)).then(function(localBookmarkToUpdate) {
            if (!localBookmarkToUpdate) {
                return $q.reject({
                    code: globals.ErrorCodes.LocalBookmarkNotFound
                });
            }
            return updateLocalBookmark(localBookmarkToUpdate.id, updatedBookmark.title, updatedBookmark.url);
        });
    };
    var checkForApiError = function() {
        var err;
        if (chrome.runtime.lastError) {
            err = new Error(chrome.runtime.lastError.message);
            utility.LogError(err);
        }
        return err;
    };
    var createLocalBookmark = function(parentId, title, url, index) {
        var newLocalBookmark = {
            index: index,
            parentId: parentId,
            title: title,
            url: url
        };
        if (!localBookmarkUrlIsSupported(url)) {
            utility.LogInfo("Bookmark url unsupported: " + url);
            newLocalBookmark.url = getNewTabUrl();
        }
        return $q(function(resolve, reject) {
            chrome.bookmarks.create(newLocalBookmark, function(createdBookmark) {
                var apiError = checkForApiError();
                if (apiError) {
                    utility.LogWarning("Failed to create local bookmark: " + JSON.stringify(newLocalBookmark));
                    apiError.code = globals.ErrorCodes.FailedCreateLocalBookmarks;
                    return reject(apiError);
                }
                resolve(createdBookmark);
            });
        });
    };
    var createLocalBookmarksFromXBookmarks = function(parentId, xBookmarks, localToolbarContainerId) {
        var processError;
        var createRecursive = function(parentId, xBookmarks, localToolbarContainerId) {
            var createChildBookmarksPromises = [];
            return xBookmarks.reduce(function(p, xBookmark) {
                return p.then(function() {
                    if (processError) {
                        return $q.resolve();
                    }
                    return bookmarks.IsSeparator(xBookmark) ? createLocalSeparator(parentId, localToolbarContainerId) : createLocalBookmark(parentId, xBookmark.title, xBookmark.url).then(function(newLocalBookmark) {
                        if (xBookmark.children && xBookmark.children.length > 0) {
                            createChildBookmarksPromises.push(createRecursive(newLocalBookmark.id, xBookmark.children, localToolbarContainerId));
                        }
                    });
                });
            }, $q.resolve()).then(function() {
                return $q.all(createChildBookmarksPromises);
            }).catch(function(err) {
                processError = err;
                throw err;
            });
        };
        return createRecursive(parentId, xBookmarks, localToolbarContainerId);
    };
    var createLocalSeparator = function(parentId, localToolbarContainerId) {
        var newLocalSeparator = {
            parentId: parentId,
            title: parentId === localToolbarContainerId ? globals.Bookmarks.VerticalSeparatorTitle : globals.Bookmarks.HorizontalSeparatorTitle,
            url: getNewTabUrl()
        };
        return $q(function(resolve, reject) {
            chrome.bookmarks.create(newLocalSeparator, function(createdSeparator) {
                var apiError = checkForApiError();
                if (apiError) {
                    utility.LogWarning("Failed to create local separator");
                    apiError.code = globals.ErrorCodes.FailedCreateLocalBookmarks;
                    return reject(apiError);
                }
                resolve(createdSeparator);
            });
        });
    };
    var deleteLocalBookmarksTree = function(localBookmarkId) {
        return $q(function(resolve, reject) {
            chrome.bookmarks.removeTree(localBookmarkId, function() {
                var apiError = checkForApiError();
                if (apiError) {
                    utility.LogWarning("Failed to delete local bookmark: " + localBookmarkId);
                    apiError.code = globals.ErrorCodes.FailedRemoveLocalBookmarks;
                    return reject(apiError);
                }
                resolve();
            });
        });
    };
    var findLocalBookmarkByPath = function(path) {
        var otherBookmarksId, toolbarBookmarksId;
        var container = path.shift().bookmark;
        if (!bookmarks.XBookmarkIsContainer(container)) {
            return $q.reject({
                code: globals.ErrorCodes.LocalBookmarkNotFound
            });
        }
        return getLocalContainerIds().then(function(localContainerIds) {
            otherBookmarksId = localContainerIds[globals.Bookmarks.OtherContainerName];
            toolbarBookmarksId = localContainerIds[globals.Bookmarks.ToolbarContainerName];
            var getLocalContainerIdPromise;
            if (unsupportedContainers.find(function(x) {
                return x === container.title;
            })) {
                getLocalContainerIdPromise = $q(function(resolve, reject) {
                    chrome.bookmarks.getChildren(otherBookmarksId, function(children) {
                        var localContainer = children.find(function(x) {
                            return x.title === container.title;
                        });
                        if (localContainer) {
                            resolve(localContainer.id);
                        } else {
                            reject({
                                code: globals.ErrorCodes.LocalBookmarkNotFound
                            });
                        }
                    });
                });
            } else {
                switch (container.title) {
                  case globals.Bookmarks.OtherContainerName:
                    getLocalContainerIdPromise = $q.resolve(otherBookmarksId);
                    break;

                  case globals.Bookmarks.ToolbarContainerName:
                    getLocalContainerIdPromise = $q.resolve(toolbarBookmarksId);
                    break;
                }
            }
            return getLocalContainerIdPromise;
        }).then(getLocalBookmarkTree).then(function(bookmarkTree) {
            if (path.length === 0) {
                return bookmarkTree;
            }
            return utility.AsyncReduce(bookmarkTree, path, function(treePosition, pathCurrent) {
                return $q(function(resolve, reject) {
                    if (!treePosition) {
                        return resolve();
                    }
                    var getLocalBookmarkIndex;
                    if (treePosition.id === otherBookmarksId) {
                        getLocalBookmarkIndex = getNumContainersBeforeBookmarkIndex(treePosition.id, pathCurrent.index).then(function(numContainers) {
                            return pathCurrent.index + numContainers;
                        });
                    } else {
                        getLocalBookmarkIndex = $q.resolve(pathCurrent.index);
                    }
                    return getLocalBookmarkIndex.then(function(localBookmarkIndex) {
                        var targetChild = treePosition.children.find(function(x) {
                            return x.index === localBookmarkIndex;
                        });
                        return resolve(targetChild);
                    }).catch(reject);
                });
            });
        });
    };
    var findLocalBookmarkByTitle = function(title) {
        if (!title) {
            return $q.resolve();
        }
        return $q(function(resolve, reject) {
            chrome.bookmarks.search({
                title: title
            }, function(results) {
                var apiError = checkForApiError();
                if (apiError) {
                    return reject(apiError);
                }
                var localBookmark;
                if (results.length > 0) {
                    localBookmark = results.shift();
                }
                resolve(localBookmark);
            });
        });
    };
    var getLocalBookmarkTree = function(localBookmarkId) {
        return $q(function(resolve, reject) {
            var callback = function(tree) {
                var apiError = checkForApiError();
                if (apiError) {
                    return reject(apiError);
                }
                if (!tree || tree.length < 1) {
                    return reject();
                }
                resolve(tree[0]);
            };
            if (localBookmarkId != null) {
                chrome.bookmarks.getSubTree(localBookmarkId, callback);
            } else {
                chrome.bookmarks.getTree(callback);
            }
        }).catch(function(err) {
            utility.LogInfo(localBookmarkId != null ? "Failed to get local bookmark tree at id: " + localBookmarkId : "Failed to get local bookmark tree");
            return $q.reject({
                code: globals.ErrorCodes.FailedGetLocalBookmarks,
                stack: err.stack
            });
        });
    };
    var getLocalBookmarksAsXBookmarks = function(localBookmarks) {
        var xBookmarks = [];
        for (var i = 0; i < localBookmarks.length; i++) {
            var currentLocalBookmark = localBookmarks[i];
            var newXBookmark = bookmarks.IsSeparator(currentLocalBookmark) ? new bookmarks.XSeparator() : new bookmarks.XBookmark(currentLocalBookmark.title, currentLocalBookmark.url);
            if (currentLocalBookmark.children && currentLocalBookmark.children.length > 0) {
                newXBookmark.children = getLocalBookmarksAsXBookmarks(currentLocalBookmark.children);
            }
            xBookmarks.push(newXBookmark);
        }
        return xBookmarks;
    };
    var getLocalContainerIds = function() {
        return getLocalBookmarkTree().then(function(tree) {
            var otherBookmarksNode = tree.children.find(function(x) {
                return x.id === "2";
            });
            var toolbarBookmarksNode = tree.children.find(function(x) {
                return x.id === "1";
            });
            if (!otherBookmarksNode || !toolbarBookmarksNode) {
                if (!otherBookmarksNode) {
                    utility.LogWarning("Missing container: other bookmarks");
                }
                if (!toolbarBookmarksNode) {
                    utility.LogWarning("Missing container: toolbar bookmarks");
                }
                return $q.reject({
                    code: globals.ErrorCodes.LocalContainerNotFound
                });
            }
            var results = {};
            results[globals.Bookmarks.OtherContainerName] = otherBookmarksNode.id;
            results[globals.Bookmarks.ToolbarContainerName] = toolbarBookmarksNode.id;
            var menuBookmarksNode = otherBookmarksNode.children.find(function(x) {
                return x.title === globals.Bookmarks.MenuContainerName;
            });
            var mobileBookmarksNode = otherBookmarksNode.children.find(function(x) {
                return x.title === globals.Bookmarks.MobileContainerName;
            });
            results[globals.Bookmarks.MenuContainerName] = menuBookmarksNode ? menuBookmarksNode.id : undefined;
            results[globals.Bookmarks.MobileContainerName] = mobileBookmarksNode ? mobileBookmarksNode.id : undefined;
            return results;
        });
    };
    var getNumContainersBeforeBookmarkIndex = function(parentId, bookmarkIndex) {
        return getLocalBookmarkTree(parentId).then(function(localBookmark) {
            var numContainers = _.filter(localBookmark.children, bookmarks.XBookmarkIsContainer).length;
            return numContainers;
        });
    };
    var isLocalBookmarkContainer = function(localBookmarkId) {
        return getLocalContainerIds().then(function(localContainerIds) {
            var menuBookmarksId = localContainerIds[globals.Bookmarks.MenuContainerName];
            var mobileBookmarksId = localContainerIds[globals.Bookmarks.MobileContainerName];
            var otherBookmarksId = localContainerIds[globals.Bookmarks.OtherContainerName];
            var toolbarBookmarksId = localContainerIds[globals.Bookmarks.ToolbarContainerName];
            var localContainers = [ {
                id: otherBookmarksId,
                xBookmarkTitle: globals.Bookmarks.OtherContainerName
            }, {
                id: toolbarBookmarksId,
                xBookmarkTitle: globals.Bookmarks.ToolbarContainerName
            } ];
            if (menuBookmarksId) {
                localContainers.push({
                    id: menuBookmarksId,
                    xBookmarkTitle: globals.Bookmarks.MenuContainerName
                });
            }
            if (mobileBookmarksId) {
                localContainers.push({
                    id: mobileBookmarksId,
                    xBookmarkTitle: globals.Bookmarks.MobileContainerName
                });
            }
            return _.findWhere(localContainers, {
                id: localBookmarkId
            });
        });
    };
    var localBookmarkUrlIsSupported = function(url) {
        if (!url) {
            return true;
        }
        var supportedRegex = /^[\w\-]+:/i;
        return supportedRegex.test(url);
    };
    var reorderLocalContainers = function() {
        return $q.all(unsupportedContainers.map(findLocalBookmarkByTitle)).then(function(results) {
            var localContainers = results.filter(function(x) {
                return x;
            });
            return $q.all(localContainers.map(function(localContainer, index) {
                return $q(function(resolve, reject) {
                    chrome.bookmarks.move(localContainer.id, {
                        index: index,
                        parentId: localContainer.parentId
                    }, function(results) {
                        var apiError = checkForApiError();
                        if (apiError) {
                            return reject(apiError);
                        }
                        resolve();
                    });
                });
            }));
        });
    };
    var sendMessage = function(message) {
        return $q(function(resolve, reject) {
            chrome.runtime.sendMessage(message, function(response) {
                if (chrome.runtime.lastError) {
                    if (chrome.runtime.lastError.message.toLowerCase().indexOf("could not establish connection") >= 0) {
                        if (window.xBrowserSync.App.HandleMessage) {
                            return window.xBrowserSync.App.HandleMessage(message, null, resolve);
                        }
                        utility.LogWarning("Message listener not available");
                        return reject(err);
                    }
                    return reject(new Error(chrome.runtime.lastError.message));
                }
                if (!response) {
                    return resolve();
                }
                if (!response.success) {
                    return reject(response.error);
                }
                resolve(response);
            });
        });
    };
    var updateLocalBookmark = function(localBookmarkId, title, url) {
        var updateInfo = {
            title: title,
            url: url
        };
        if (!localBookmarkUrlIsSupported(url)) {
            utility.LogInfo("Bookmark url unsupported: " + url);
            updateInfo.url = getNewTabUrl();
        }
        return $q(function(resolve, reject) {
            chrome.bookmarks.update(localBookmarkId, updateInfo, function(updatedBookmark) {
                var apiError = checkForApiError();
                if (apiError) {
                    utility.LogWarning("Failed to update local bookmark: " + JSON.stringify(updateInfo));
                    apiError.code = globals.ErrorCodes.FailedUpdateLocalBookmarks;
                    return reject(apiError);
                }
                resolve(updatedBookmark);
            });
        });
    };
    var wasContainerChanged = function(changedBookmark, xBookmarks) {
        return xBookmarks ? $q.resolve(xBookmarks) : bookmarks.GetBookmarks().then(function(results) {
            xBookmarks = results;
            if (bookmarks.XBookmarkIsContainer(changedBookmark)) {
                return true;
            }
            return getLocalContainerIds().then(function(localContainerIds) {
                var otherBookmarksId = localContainerIds[globals.Bookmarks.OtherContainerName];
                if (changedBookmark.parentId !== otherBookmarksId) {
                    return false;
                }
                return $q(function(resolve, reject) {
                    try {
                        chrome.bookmarks.getChildren(otherBookmarksId, function(children) {
                            var apiError = checkForApiError();
                            if (apiError) {
                                throw apiError;
                            }
                            var localContainers = children.filter(function(x) {
                                return unsupportedContainers.find(function(y) {
                                    return y === x.title;
                                });
                            });
                            var containersCount = 0;
                            var checksFailed = false;
                            var count;
                            var menuContainer = bookmarks.GetContainer(globals.Bookmarks.MenuContainerName, xBookmarks, false);
                            if (menuContainer) {
                                containersCount++;
                                count = localContainers.filter(function(x) {
                                    return x.title === globals.Bookmarks.MenuContainerName;
                                }).length;
                                checksFailed = count !== 1 ? true : checksFailed;
                            }
                            var mobileContainer = bookmarks.GetContainer(globals.Bookmarks.MobileContainerName, xBookmarks, false);
                            if (mobileContainer) {
                                containersCount++;
                                count = localContainers.filter(function(x) {
                                    return x.title === globals.Bookmarks.MobileContainerName;
                                }).length;
                                checksFailed = count !== 1 ? true : checksFailed;
                            }
                            checksFailed = containersCount !== localContainers.length ? true : checksFailed;
                            resolve(checksFailed);
                        });
                    } catch (err) {
                        utility.LogInfo("Failed to detect whether container changed: " + JSON.stringify(changedBookmark));
                        return reject({
                            code: globals.ErrorCodes.FailedGetLocalBookmarks,
                            stack: err.stack
                        });
                    }
                });
            });
        });
    };
    return new ChromeImplementation();
};

var xBrowserSync = xBrowserSync || {};

xBrowserSync.App = xBrowserSync.App || {};

xBrowserSync.App.Background = function($q, $timeout, platform, globals, utility, bookmarks) {
    "use strict";
    var vm, bookmarkEventsQueue = [], notificationClickHandlers = [], startUpInitiated = false, processBookmarkEventsTimeout;
    var Background = function() {
        vm = this;
        vm.install = function(event) {
            if (startUpInitiated) {
                return;
            }
            var details = angular.element(event.currentTarget).data("details");
            onInstallHandler(details);
        };
        vm.startup = function() {
            if (startUpInitiated) {
                return;
            }
            onStartupHandler();
        };
        chrome.alarms.onAlarm.addListener(onAlarmHandler);
        chrome.notifications.onClicked.addListener(onNotificationClicked);
        chrome.notifications.onClosed.addListener(onNotificationClosed);
        chrome.runtime.onMessage.addListener(onMessageHandler);
        window.xBrowserSync.App.HandleMessage = onMessageHandler;
    };
    var changeBookmark = function(id) {
        var changedBookmark, changeInfo, locationInfo, syncChange = $q.defer();
        var prepareToSyncChanges = $q(function(resolve, reject) {
            chrome.bookmarks.getSubTree(id, function(subTree) {
                var apiError = checkForApiError();
                if (apiError) {
                    return reject(apiError);
                }
                resolve(subTree);
            });
        }).then(function(results) {
            if (!results || results.length === 0) {
                return $q.reject({
                    code: globals.ErrorCodes.LocalBookmarkNotFound
                });
            }
            changedBookmark = results[0];
            return platform.Bookmarks.GetLocalBookmarkLocationInfo(id);
        }).then(function(results) {
            if (!results) {
                utility.LogWarning("Unable to retrieve local bookmark location info, not syncing this change");
                syncChange.resolve(false);
                return;
            }
            locationInfo = results;
            return (bookmarks.IsSeparator(changedBookmark) ? convertLocalBookmarkToSeparator(changedBookmark) : $q.resolve(changedBookmark)).then(function(bookmark) {
                changeInfo = {
                    bookmark: bookmark,
                    container: locationInfo.container,
                    indexPath: locationInfo.indexPath,
                    type: globals.UpdateType.Update
                };
                return platform.Bookmarks.ShouldSyncLocalChanges(changeInfo);
            }).then(function(doSync) {
                syncChange.resolve(doSync);
                return changeInfo;
            });
        }).catch(function(err) {
            syncChange.reject(err);
        });
        return $q(function(resolve, reject) {
            queueBookmarksSync({
                changeInfo: prepareToSyncChanges,
                syncChange: syncChange.promise,
                type: globals.SyncType.Push
            }, function(response) {
                if (response.success) {
                    resolve(response.bookmarks);
                } else {
                    reject(response.error);
                }
            }, false);
        });
    };
    var checkForApiError = function() {
        var err;
        if (chrome.runtime.lastError) {
            err = new Error(chrome.runtime.lastError.message);
            utility.LogError(err);
        }
        return err;
    };
    var checkForNewVersion = function() {
        $timeout(function() {
            utility.CheckForNewVersion().then(function(newVersion) {
                if (!newVersion) {
                    return;
                }
                displayAlert(platform.GetConstant(globals.Constants.AppUpdateAvailable_Title), platform.GetConstant(globals.Constants.AppUpdateAvailable_Message).replace("{version}", newVersion), globals.ReleaseNotesUrlStem + newVersion.replace(/^v/, ""));
            });
        }, 5e3);
    };
    var checkForUpdatesOnStartup = function() {
        return $q(function(resolve, reject) {
            if (!utility.IsNetworkConnected()) {
                utility.LogInfo("Couldn’t check for updates on startup: network offline");
                return resolve(false);
            }
            bookmarks.CheckForUpdates().then(resolve).catch(function(err) {
                if (err.code !== globals.ErrorCodes.HttpRequestFailed) {
                    return reject(err);
                }
                utility.LogInfo("Connection to API failed, retrying check for sync updates momentarily");
                $timeout(function() {
                    platform.LocalStorage.Get(globals.CacheKeys.SyncEnabled).then(function(syncEnabled) {
                        if (!syncEnabled) {
                            utility.LogInfo("Sync was disabled before retry attempted");
                            return reject({
                                code: globals.ErrorCodes.HttpRequestCancelled
                            });
                        }
                        bookmarks.CheckForUpdates().then(resolve).catch(reject);
                    }).catch(reject);
                }, 5e3);
            });
        }).then(function(updatesAvailable) {
            if (!updatesAvailable) {
                return;
            }
            return $q(function(resolve, reject) {
                queueBookmarksSync({
                    type: globals.SyncType.Pull
                }, function(response) {
                    if (response.success) {
                        resolve(response.bookmarks);
                    } else {
                        reject(response.error);
                    }
                });
            });
        });
    };
    var checkPermsAndGetPageMetadata = function() {
        return platform.Permissions.Check().then(function(hasPermissions) {
            if (!hasPermissions) {
                utility.LogInfo("Do not have permission to read active tab content");
            }
            return hasPermissions ? platform.GetPageMetadata(true) : platform.GetPageMetadata(false);
        });
    };
    var convertLocalBookmarkToSeparator = function(bookmark) {
        return $q(function(resolve) {
            disableEventListeners(resolve);
        }).then(function() {
            return platform.Bookmarks.LocalBookmarkInToolbar(bookmark);
        }).then(function(inToolbar) {
            var title = inToolbar ? globals.Bookmarks.VerticalSeparatorTitle : globals.Bookmarks.HorizontalSeparatorTitle;
            return $q(function(resolve, reject) {
                var separator = {
                    index: bookmark.index,
                    parentId: bookmark.parentId,
                    title: title,
                    url: platform.GetNewTabUrl()
                };
                chrome.bookmarks.remove(bookmark.id, function() {
                    var apiError = checkForApiError();
                    if (apiError) {
                        return reject(apiError);
                    }
                    chrome.bookmarks.create(separator, function(createdBookmark) {
                        var apiError = checkForApiError();
                        if (apiError) {
                            return reject(apiError);
                        }
                        resolve(createdBookmark);
                    });
                });
            });
        }).finally(function() {
            return $q(function(resolve) {
                enableEventListeners(resolve);
            });
        });
    };
    var createBookmark = function(id, createdBookmark) {
        var changeInfo, locationInfo, syncChange = $q.defer();
        var prepareToSyncChanges = platform.Bookmarks.GetLocalBookmarkLocationInfo(id).then(function(results) {
            if (!results) {
                utility.LogWarning("Unable to retrieve local bookmark location info, not syncing this change");
                syncChange.resolve(false);
                return;
            }
            locationInfo = results;
            var convertToSeparatorOrGetMetadata;
            if (bookmarks.IsSeparator(createdBookmark)) {
                convertToSeparatorOrGetMetadata = convertLocalBookmarkToSeparator(createdBookmark);
            } else if (createdBookmark.url) {
                convertToSeparatorOrGetMetadata = checkPermsAndGetPageMetadata().then(function(metadata) {
                    if (metadata && createdBookmark.url === metadata.url) {
                        createdBookmark.title = utility.StripTags(metadata.title);
                        createdBookmark.description = utility.StripTags(metadata.description);
                        createdBookmark.tags = utility.GetTagArrayFromText(metadata.tags);
                    }
                    return createdBookmark;
                });
            } else {
                convertToSeparatorOrGetMetadata = $q.resolve(createdBookmark);
            }
            return convertToSeparatorOrGetMetadata.then(function(bookmark) {
                changeInfo = {
                    bookmark: bookmark,
                    container: locationInfo.container,
                    indexPath: locationInfo.indexPath,
                    type: globals.UpdateType.Create
                };
                return platform.Bookmarks.ShouldSyncLocalChanges(changeInfo);
            }).then(function(doSync) {
                syncChange.resolve(doSync);
                return changeInfo;
            });
        }).catch(function(err) {
            syncChange.reject(err);
        });
        return $q(function(resolve, reject) {
            queueBookmarksSync({
                changeInfo: prepareToSyncChanges,
                syncChange: syncChange.promise,
                type: globals.SyncType.Push
            }, function(response) {
                if (response.success) {
                    resolve(response.bookmarks);
                } else {
                    reject(response.error);
                }
            }, false);
        });
    };
    var disableEventListeners = function(sendResponse) {
        sendResponse = sendResponse || function() {};
        var response = {
            success: true
        };
        chrome.bookmarks.onCreated.removeListener(onCreatedHandler);
        chrome.bookmarks.onRemoved.removeListener(onRemovedHandler);
        chrome.bookmarks.onChanged.removeListener(onChangedHandler);
        chrome.bookmarks.onMoved.removeListener(onMovedHandler);
        sendResponse(response);
    };
    var disableSync = function(sendResponse) {
        bookmarks.DisableSync().then(function() {
            sendResponse({
                success: true
            });
        });
    };
    var displayAlert = function(title, message, url) {
        var urlRegex = new RegExp(globals.URL.ValidUrlRegex);
        var matches = message.match(urlRegex);
        var messageToDisplay = !matches || matches.length === 0 ? message : new DOMParser().parseFromString("<span>" + message + "</span>", "text/xml").firstElementChild.textContent;
        var options = {
            type: "basic",
            title: title,
            message: messageToDisplay,
            iconUrl: "img/notification.svg"
        };
        chrome.notifications.create(utility.GetUniqueishId(), options, function(notificationId) {
            var urlToOpenOnClick = url;
            if (matches && matches.length > 0) {
                urlToOpenOnClick = matches[0];
            }
            if (urlToOpenOnClick) {
                var openUrlInNewTab = function() {
                    platform.OpenUrl(urlToOpenOnClick);
                };
                notificationClickHandlers.push({
                    id: notificationId,
                    eventHandler: openUrlInNewTab
                });
            }
        });
    };
    var enableEventListeners = function(sendResponse) {
        sendResponse = sendResponse || function() {};
        var response = {
            success: true
        };
        $q(function(resolve, reject) {
            disableEventListeners(function(disableResponse) {
                if (disableResponse.success) {
                    resolve();
                } else {
                    reject(disableResponse.error);
                }
            });
        }).then(function() {
            chrome.bookmarks.onCreated.addListener(onCreatedHandler);
            chrome.bookmarks.onRemoved.addListener(onRemovedHandler);
            chrome.bookmarks.onChanged.addListener(onChangedHandler);
            chrome.bookmarks.onMoved.addListener(onMovedHandler);
        }).catch(function(err) {
            utility.LogInfo("Failed to enable event listeners");
            response.error = err;
            response.success = false;
        }).finally(function() {
            sendResponse(response);
        });
    };
    var getCurrentSync = function(sendResponse) {
        try {
            sendResponse({
                currentSync: bookmarks.GetCurrentSync(),
                success: true
            });
        } catch (err) {}
    };
    var getLatestUpdates = function() {
        var currentSync = bookmarks.GetCurrentSync();
        if (currentSync) {
            return $q.resolve();
        }
        return platform.LocalStorage.Get(globals.CacheKeys.SyncEnabled).then(function(syncEnabled) {
            if (!syncEnabled) {
                return;
            }
            return bookmarks.CheckForUpdates().then(function(updatesAvailable) {
                if (!updatesAvailable) {
                    return;
                }
                return $q(function(resolve, reject) {
                    queueBookmarksSync({
                        type: globals.SyncType.Pull
                    }, function(response) {
                        if (response.success) {
                            resolve(response.bookmarks);
                        } else {
                            reject(response.error);
                        }
                    });
                });
            });
        }).catch(function(err) {
            if (utility.IsNetworkConnectionError(err)) {
                utility.LogInfo("Could not check for updates, no connection");
                return;
            }
            utility.LogError(err, "background.onAlarmHandler");
            if (err.code === globals.ErrorCodes.NoDataFound) {
                err.code = globals.ErrorCodes.SyncRemoved;
                bookmarks.DisableSync();
            }
            var errMessage = utility.GetErrorMessageFromException(err);
            displayAlert(errMessage.title, errMessage.message);
        });
    };
    var getSyncQueueLength = function(sendResponse) {
        try {
            sendResponse({
                syncQueueLength: bookmarks.GetSyncQueueLength(),
                success: true
            });
        } catch (err) {}
    };
    var installExtension = function(currentVersion) {
        return platform.LocalStorage.Set(globals.CacheKeys.TraceLog).then(function() {
            return $q.all([ platform.LocalStorage.Set(globals.CacheKeys.CheckForAppUpdates, true), platform.LocalStorage.Set(globals.CacheKeys.DisplayHelp, true), platform.LocalStorage.Set(globals.CacheKeys.SyncBookmarksToolbar, true), platform.LocalStorage.Get(globals.CacheKeys.DisplayPermissions).then(function(displayPermissions) {
                if (displayPermissions === false) {
                    return;
                }
                return platform.LocalStorage.Set(globals.CacheKeys.DisplayPermissions, true);
            }) ]);
        }).then(function() {
            return platform.Bookmarks.Get().then(function(localBookmarks) {
                var data = {
                    bookmarks: localBookmarks,
                    date: new Date().toISOString()
                };
                return platform.LocalStorage.Set(globals.CacheKeys.InstallBackup, JSON.stringify(data));
            });
        }).then(function() {
            utility.LogInfo("Installed v" + currentVersion);
        });
    };
    var moveBookmark = function(id, moveInfo) {
        var changeInfo, syncChange = $q.defer();
        var prepareToSyncChanges = $q.all([ platform.Bookmarks.GetLocalBookmarkLocationInfo(moveInfo.oldParentId, [ moveInfo.oldIndex ]), platform.Bookmarks.GetLocalBookmarkLocationInfo(moveInfo.parentId, [ moveInfo.index ]) ]).then(function(locationInfo) {
            if (!locationInfo[0] || !locationInfo[1]) {
                utility.LogWarning("Unable to retrieve local bookmark location info, not syncing this change");
                syncChange.resolve(false);
                return;
            }
            if (locationInfo[1].indexPath[0] < 0) {
                return $q.reject({
                    code: globals.ErrorCodes.ContainerChanged
                });
            }
            changeInfo = {
                container: locationInfo[0].container,
                indexPath: locationInfo[0].indexPath,
                targetInfo: {
                    container: locationInfo[1].container,
                    indexPath: locationInfo[1].indexPath
                },
                type: globals.UpdateType.Move
            };
            return $q(function(resolve, reject) {
                chrome.bookmarks.getSubTree(id, function(subTree) {
                    var apiError = checkForApiError();
                    if (apiError) {
                        return reject(apiError);
                    }
                    resolve(subTree);
                });
            }).then(function(results) {
                if (!results || results.length === 0) {
                    utility.LogWarning("Unable to locate moved bookmark");
                    return $q.reject({
                        code: globals.ErrorCodes.LocalBookmarkNotFound
                    });
                }
                changeInfo.bookmark = results[0];
                changeInfo.targetInfo.bookmark = results[0];
                return bookmarks.IsSeparator(changeInfo.bookmark) ? convertLocalBookmarkToSeparator(changeInfo.bookmark) : $q.resolve();
            }).then(function() {
                return $q.all([ platform.Bookmarks.ShouldSyncLocalChanges(changeInfo), platform.Bookmarks.ShouldSyncLocalChanges(changeInfo.targetInfo) ]);
            }).then(function(results) {
                changeInfo.syncChange = results[0];
                changeInfo.targetInfo.syncChange = results[1];
                syncChange.resolve(changeInfo.syncChange || changeInfo.targetInfo.syncChange);
                return changeInfo;
            });
        }).catch(function(err) {
            syncChange.reject(err);
        });
        return $q(function(resolve, reject) {
            queueBookmarksSync({
                changeInfo: prepareToSyncChanges,
                syncChange: syncChange.promise,
                type: globals.SyncType.Push
            }, function(response) {
                if (response.success) {
                    resolve(response.bookmarks);
                } else {
                    reject(response.error);
                }
            }, false);
        });
    };
    var onAlarmHandler = function(alarm) {
        if (alarm && alarm.name === globals.Alarm.Name) {
            getLatestUpdates();
        }
    };
    var onBookmarkEventHandler = function() {
        if (processBookmarkEventsTimeout) {
            $timeout.cancel(processBookmarkEventsTimeout);
        }
        bookmarkEventsQueue.push(arguments);
        processBookmarkEventsTimeout = $timeout(processBookmarkEventsQueue, 1e3);
    };
    var onChangedHandler = function() {
        utility.LogInfo("onChanged event detected");
        onBookmarkEventHandler(changeBookmark, arguments);
    };
    var onCreatedHandler = function() {
        utility.LogInfo("onCreated event detected");
        onBookmarkEventHandler(createBookmark, arguments);
    };
    var onInstallHandler = function(details) {
        startUpInitiated = true;
        var currentVersion = chrome.runtime.getManifest().version;
        var installOrUpgrade = $q.resolve();
        if (details && details.reason === "install") {
            installOrUpgrade = installExtension(currentVersion);
        } else if (details && details.reason === "update" && details.previousVersion && compareVersions.compare(details.previousVersion, currentVersion, "<")) {
            installOrUpgrade = upgradeExtension(details.previousVersion, currentVersion);
        }
        installOrUpgrade.then(onStartupHandler);
    };
    var onMessageHandler = function(message, sender, sendResponse) {
        switch (message.command) {
          case globals.Commands.SyncBookmarks:
            queueBookmarksSync(message, sendResponse);
            break;

          case globals.Commands.RestoreBookmarks:
            restoreBookmarks(message, sendResponse);
            break;

          case globals.Commands.GetCurrentSync:
            getCurrentSync(sendResponse);
            break;

          case globals.Commands.GetSyncQueueLength:
            getSyncQueueLength(sendResponse);
            break;

          case globals.Commands.DisableSync:
            disableSync(sendResponse);
            break;

          case globals.Commands.EnableEventListeners:
            enableEventListeners(sendResponse);
            break;

          case globals.Commands.DisableEventListeners:
            disableEventListeners(sendResponse);
            break;

          default:
            var err = new Error("Unknown command: " + message.command);
            utility.LogError(err, "background.onMessageHandler");
            sendResponse({
                success: false,
                error: err
            });
        }
        return true;
    };
    var onMovedHandler = function() {
        utility.LogInfo("onMoved event detected");
        onBookmarkEventHandler(moveBookmark, arguments);
    };
    var onNotificationClicked = function(notificationId) {
        var notificationClickHandler = notificationClickHandlers.find(function(x) {
            return x.id === notificationId;
        });
        if (notificationClickHandler != null) {
            notificationClickHandler.eventHandler();
            chrome.notifications.clear(notificationId);
        }
    };
    var onNotificationClosed = function(notificationId) {
        var index = notificationClickHandlers.findIndex(function(x) {
            return x.id === notificationId;
        });
        if (index >= 0) {
            notificationClickHandlers.splice(index, 1);
        }
    };
    var onRemovedHandler = function() {
        utility.LogInfo("onRemoved event detected");
        onBookmarkEventHandler(removeBookmark, arguments);
    };
    var onStartupHandler = function() {
        startUpInitiated = true;
        var cachedData, syncEnabled;
        utility.LogInfo("Starting up");
        $q.all([ platform.LocalStorage.Get(), platform.LocalStorage.Set(globals.CacheKeys.TraceLog) ]).then(function(data) {
            cachedData = data[0];
            syncEnabled = cachedData[globals.CacheKeys.SyncEnabled];
            var checkForAppUpdates = cachedData[globals.CacheKeys.CheckForAppUpdates];
            cachedData.appVersion = globals.AppVersion;
            cachedData.platform = _.omit(browserDetect(), "versionNumber");
            utility.LogInfo(_.omit(cachedData, "debugMessageLog", globals.CacheKeys.Bookmarks, globals.CacheKeys.InstallBackup, globals.CacheKeys.TraceLog, globals.CacheKeys.Password));
            platform.Interface.Refresh(syncEnabled);
            if (checkForAppUpdates) {
                checkForNewVersion();
            }
            if (!syncEnabled) {
                return;
            }
            return bookmarks.EnableSync().then(function() {
                $timeout(function() {
                    checkForUpdatesOnStartup().catch(function(err) {
                        if (err.code === globals.ErrorCodes.HttpRequestCancelled) {
                            return;
                        }
                        var errMessage = utility.GetErrorMessageFromException(err);
                        displayAlert(errMessage.title, errMessage.message);
                        utility.LogError(err, "background.onStartupHandler");
                    });
                }, 1e3);
            });
        });
    };
    var processBookmarkEventsQueue = function() {
        var doActionUntil = function() {
            return $q.resolve(bookmarkEventsQueue.length === 0);
        };
        var action = function() {
            var currentEvent = bookmarkEventsQueue.shift();
            currentEvent[0].apply(this, currentEvent[1]).catch(function(err) {
                var errMessage = utility.GetErrorMessageFromException(err);
                displayAlert(errMessage.title, errMessage.message);
            });
            return $q.resolve();
        };
        utility.PromiseWhile(bookmarkEventsQueue, doActionUntil, action).then(function() {
            $timeout(function() {
                bookmarks.Sync().catch(function(err) {
                    var errToDisplay = err;
                    return (bookmarks.CheckIfRefreshSyncedDataOnError(err) ? refreshLocalSyncData() : $q.resolve()).catch(function(refreshErr) {
                        errToDisplay = refreshErr;
                    }).finally(function() {
                        var errMessage = utility.GetErrorMessageFromException(errToDisplay);
                        displayAlert(errMessage.title, errMessage.message);
                    });
                });
            }, 100);
        });
    };
    var queueBookmarksSync = function(syncData, callback, runSync) {
        runSync = runSync === undefined ? true : runSync;
        callback = callback || function() {};
        return bookmarks.QueueSync(syncData, runSync).then(function(bookmarks) {
            callback({
                bookmarks: bookmarks,
                success: true
            });
        }).catch(function(err) {
            return (bookmarks.CheckIfRefreshSyncedDataOnError(err) ? refreshLocalSyncData() : $q.resolve()).then(function() {
                callback({
                    error: err,
                    success: false
                });
            });
        });
    };
    var refreshLocalSyncData = function() {
        return bookmarks.QueueSync({
            type: globals.SyncType.Pull
        }).then(function() {
            utility.LogInfo("Local sync data refreshed");
        });
    };
    var removeBookmark = function(id, removeInfo) {
        var changeInfo, syncChange = $q.defer();
        var prepareToSyncChanges = platform.Bookmarks.GetLocalBookmarkLocationInfo(removeInfo.parentId, [ removeInfo.index ]).then(function(locationInfo) {
            if (!locationInfo) {
                utility.LogWarning("Unable to retrieve local bookmark location info, not syncing this change");
                syncChange.resolve(false);
                return;
            }
            var deletedBookmark = removeInfo.node;
            deletedBookmark.parentId = removeInfo.parentId;
            changeInfo = {
                bookmark: deletedBookmark,
                container: locationInfo.container,
                indexPath: locationInfo.indexPath,
                type: globals.UpdateType.Delete
            };
            return platform.Bookmarks.ShouldSyncLocalChanges(changeInfo).then(function(doSync) {
                syncChange.resolve(doSync);
                return changeInfo;
            });
        }).catch(function(err) {
            syncChange.reject(err);
        });
        return $q(function(resolve, reject) {
            queueBookmarksSync({
                changeInfo: prepareToSyncChanges,
                syncChange: syncChange.promise,
                type: globals.SyncType.Push
            }, function(response) {
                if (response.success) {
                    resolve(response.bookmarks);
                } else {
                    reject(response.error);
                }
            }, false);
        });
    };
    var restoreBookmarks = function(restoreData, sendResponse) {
        sendResponse = sendResponse || function() {};
        return $q(function(resolve, reject) {
            disableEventListeners(function(response) {
                if (response.success) {
                    resolve();
                } else {
                    reject(response.error);
                }
            });
        }).then(function() {
            return bookmarks.UpgradeContainers(restoreData.bookmarks || []);
        }).then(function(bookmarksToRestore) {
            restoreData.bookmarks = bookmarksToRestore;
            return queueBookmarksSync(restoreData, sendResponse);
        });
    };
    var upgradeExtension = function(oldVersion, newVersion) {
        return platform.LocalStorage.Set(globals.CacheKeys.TraceLog).then(function() {
            utility.LogInfo("Upgrading from " + oldVersion + " to " + newVersion);
            displayAlert(platform.GetConstant(globals.Constants.AppUpdated_Title) + globals.AppVersion, platform.GetConstant(globals.Constants.AppUpdated_Message), globals.ReleaseNotesUrlStem + globals.AppVersion);
            return platform.LocalStorage.Set(globals.CacheKeys.DisplayUpdated, true);
        }).catch(function(err) {
            utility.LogError(err, "background.upgradeExtension");
            var errMessage = utility.GetErrorMessageFromException(err);
            displayAlert(errMessage.title, errMessage.message);
        });
    };
    return new Background();
};

xBrowserSync.App.ChromeBackground = angular.module("xBrowserSync.App.ChromeBackground", []);

xBrowserSync.App.ChromeBackground.config([ "$compileProvider", function($compileProvider) {
    $compileProvider.debugInfoEnabled(false);
} ]);

xBrowserSync.App.ChromeBackground.config([ "$qProvider", function($qProvider) {
    $qProvider.errorOnUnhandledRejections(false);
} ]);

xBrowserSync.App.Platform.$inject = [ "$q" ];

xBrowserSync.App.ChromeBackground.factory("platform", xBrowserSync.App.Platform);

xBrowserSync.App.ChromeBackground.factory("globals", xBrowserSync.App.Global);

xBrowserSync.App.HttpInterceptor.$inject = [ "$q", "globals" ];

xBrowserSync.App.ChromeBackground.factory("httpInterceptor", xBrowserSync.App.HttpInterceptor);

xBrowserSync.App.ChromeBackground.config([ "$httpProvider", function($httpProvider) {
    $httpProvider.interceptors.push("httpInterceptor");
} ]);

xBrowserSync.App.Utility.$inject = [ "$http", "$q", "platform", "globals" ];

xBrowserSync.App.ChromeBackground.factory("utility", xBrowserSync.App.Utility);

xBrowserSync.App.API.$inject = [ "$http", "$q", "platform", "globals", "utility" ];

xBrowserSync.App.ChromeBackground.factory("api", xBrowserSync.App.API);

xBrowserSync.App.Bookmarks.$inject = [ "$q", "$timeout", "platform", "globals", "api", "utility" ];

xBrowserSync.App.ChromeBackground.factory("bookmarks", xBrowserSync.App.Bookmarks);

xBrowserSync.App.PlatformImplementation.$inject = [ "$interval", "$q", "$timeout", "platform", "globals", "utility", "bookmarks" ];

xBrowserSync.App.ChromeBackground.factory("platformImplementation", xBrowserSync.App.PlatformImplementation);

xBrowserSync.App.Background.$inject = [ "$q", "$timeout", "platform", "globals", "utility", "bookmarks", "platformImplementation" ];

xBrowserSync.App.ChromeBackground.controller("Controller", xBrowserSync.App.Background);

chrome.runtime.onInstalled.addListener(function(details) {
    var element = document.querySelector("#install");
    angular.element(element).data("details", details);
    document.querySelector("#install").click();
});

chrome.runtime.onStartup.addListener(function() {
    document.querySelector("#startup").click();
});